<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Have a nice day, cheio</title>
    <link>https://cheioKID.github.io/</link>
    <description>Recent content on Have a nice day, cheio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://cheioKID.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://cheioKID.github.io/about/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/about/</guid>
      
        <description>&lt;p&gt;I may be the fool across the universe&lt;/p&gt;

&lt;p&gt;Thankful for all goodwill.&lt;/p&gt;

&lt;p&gt;Cheio W.&lt;/p&gt;

&lt;p&gt;XM. 2019.1.22&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Know Face Recognition Sample</title>
      <link>https://cheioKID.github.io/post/machine-learning/know-face-recognition-sample/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/machine-learning/know-face-recognition-sample/</guid>
      
        <description>

&lt;h2 id=&#34;interpretation&#34;&gt;Interpretation&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;dataset.images : numpy array of shape (13233, 62, 47)
        Each row is a face image corresponding to one of the 5749 people in
        the dataset. Changing the &lt;code&gt;slice_&lt;/code&gt; or resize parameters will change
        the shape of the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;n_samples, h, w = lfw_people.images.shape # no. of samples, height of image and width of image 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;dataset.data : numpy array of shape (13233, 2914)
    Each row corresponds to a ravelled face image of original size 62 x 47
    pixels. Changing the &lt;code&gt;slice_&lt;/code&gt; or resize parameters will change the
    shape of the output.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;X = lfw_people.data
n_features = X.shape[1] # 62 * 48 pixels means 2914 features

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42) # separate

pca = PCA(n_components=n_components, svd_solver=&#39;randomized&#39;, whiten=True).fit(X_train) # PCA needs to specify n_components

eigenfaces = pca.components_.reshape((n_components, h, w)) # the components

X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test) # transform to apply PCA to dataset

param_grid = {&#39;C&#39;: [1e3, 5e3, 1e4, 5e4, 1e5],
              &#39;gamma&#39;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }
clf = GridSearchCV(SVC(kernel=&#39;rbf&#39;, class_weight=&#39;balanced&#39;), param_grid, cv=5) #search for proper parameter
clf = clf.fit(X_train_pca, y_train) # fit with the dataset

y_pred = clf.predict(X_test_pca) # predict pca(test)

classification_report...
confusion_matrix...
plt show...

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;confusion&#34;&gt;Confusion&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;for machine learning we use the 2 data directly (as relative pixel positions info is ignored by this model)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Don&amp;rsquo;t know what does it mean, maybe one way differs from convolutional way&lt;/p&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://scikit-learn.org/stable/auto_examples/applications/plot_face_recognition.html#sphx-glr-auto-examples-applications-plot-face-recognition-py&#34;&gt;Faces recognition example using eigenfaces and SVMs&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
===================================================
Faces recognition example using eigenfaces and SVMs
===================================================

The dataset used in this example is a preprocessed excerpt of the
&amp;quot;Labeled Faces in the Wild&amp;quot;, aka LFW_:

  http://vis-www.cs.umass.edu/lfw/lfw-funneled.tgz (233MB)

.. _LFW: http://vis-www.cs.umass.edu/lfw/

Expected results for the top 5 most represented people in the dataset:

================== ============ ======= ========== =======
                   precision    recall  f1-score   support
================== ============ ======= ========== =======
     Ariel Sharon       0.67      0.92      0.77        13
     Colin Powell       0.75      0.78      0.76        60
  Donald Rumsfeld       0.78      0.67      0.72        27
    George W Bush       0.86      0.86      0.86       146
Gerhard Schroeder       0.76      0.76      0.76        25
      Hugo Chavez       0.67      0.67      0.67        15
       Tony Blair       0.81      0.69      0.75        36

      avg / total       0.80      0.80      0.80       322
================== ============ ======= ========== =======

&amp;quot;&amp;quot;&amp;quot;
from __future__ import print_function

from time import time
import logging
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.model_selection import GridSearchCV
from sklearn.datasets import fetch_lfw_people
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA
from sklearn.svm import SVC


print(__doc__)

# Display progress logs on stdout
logging.basicConfig(level=logging.INFO, format=&#39;%(asctime)s %(message)s&#39;)


# #############################################################################
# Download the data, if not already on disk and load it as numpy arrays

lfw_people = fetch_lfw_people(data_home=&#39;/Users/cheio/IdeaProjects/test-lstm/&#39;,min_faces_per_person=70, resize=0.4)

# introspect the images arrays to find the shapes (for plotting)
n_samples, h, w = lfw_people.images.shape

# for machine learning we use the 2 data directly (as relative pixel
# positions info is ignored by this model)
X = lfw_people.data
n_features = X.shape[1]

# the label to predict is the id of the person
y = lfw_people.target
target_names = lfw_people.target_names
n_classes = target_names.shape[0]

print(&amp;quot;Total dataset size:&amp;quot;)
print(&amp;quot;n_samples: %d&amp;quot; % n_samples)
print(&amp;quot;n_features: %d&amp;quot; % n_features)
print(&amp;quot;n_classes: %d&amp;quot; % n_classes)


# #############################################################################
# Split into a training set and a test set using a stratified k fold

# split into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42)


# #############################################################################
# Compute a PCA (eigenfaces) on the face dataset (treated as unlabeled
# dataset): unsupervised feature extraction / dimensionality reduction
n_components = 150

print(&amp;quot;Extracting the top %d eigenfaces from %d faces&amp;quot;
      % (n_components, X_train.shape[0]))
t0 = time()
pca = PCA(n_components=n_components, svd_solver=&#39;randomized&#39;,
          whiten=True).fit(X_train)
print(&amp;quot;done in %0.3fs&amp;quot; % (time() - t0))

eigenfaces = pca.components_.reshape((n_components, h, w))

print(&amp;quot;Projecting the input data on the eigenfaces orthonormal basis&amp;quot;)
t0 = time()
X_train_pca = pca.transform(X_train)
X_test_pca = pca.transform(X_test)
print(&amp;quot;done in %0.3fs&amp;quot; % (time() - t0))


# #############################################################################
# Train a SVM classification model

print(&amp;quot;Fitting the classifier to the training set&amp;quot;)
t0 = time()
param_grid = {&#39;C&#39;: [1e3, 5e3, 1e4, 5e4, 1e5],
              &#39;gamma&#39;: [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.1], }
clf = GridSearchCV(SVC(kernel=&#39;rbf&#39;, class_weight=&#39;balanced&#39;),
                   param_grid, cv=5)
clf = clf.fit(X_train_pca, y_train)
print(&amp;quot;done in %0.3fs&amp;quot; % (time() - t0))
print(&amp;quot;Best estimator found by grid search:&amp;quot;)
print(clf.best_estimator_)


# #############################################################################
# Quantitative evaluation of the model quality on the test set

print(&amp;quot;Predicting people&#39;s names on the test set&amp;quot;)
t0 = time()
y_pred = clf.predict(X_test_pca)
print(&amp;quot;done in %0.3fs&amp;quot; % (time() - t0))

print(classification_report(y_test, y_pred, target_names=target_names))
print(confusion_matrix(y_test, y_pred, labels=range(n_classes)))


# #############################################################################
# Qualitative evaluation of the predictions using matplotlib

def plot_gallery(images, titles, h, w, n_row=3, n_col=4):
    &amp;quot;&amp;quot;&amp;quot;Helper function to plot a gallery of portraits&amp;quot;&amp;quot;&amp;quot;
    plt.figure(figsize=(1.8 * n_col, 2.4 * n_row))
    plt.subplots_adjust(bottom=0, left=.01, right=.99, top=.90, hspace=.35)
    for i in range(n_row * n_col):
        plt.subplot(n_row, n_col, i + 1)
        plt.imshow(images[i].reshape((h, w)), cmap=plt.cm.gray)
        plt.title(titles[i], size=12)
        plt.xticks(())
        plt.yticks(())


# plot the result of the prediction on a portion of the test set

def title(y_pred, y_test, target_names, i):
    pred_name = target_names[y_pred[i]].rsplit(&#39; &#39;, 1)[-1]
    true_name = target_names[y_test[i]].rsplit(&#39; &#39;, 1)[-1]
    return &#39;predicted: %s\ntrue:      %s&#39; % (pred_name, true_name)

prediction_titles = [title(y_pred, y_test, target_names, i)
                     for i in range(y_pred.shape[0])]

plot_gallery(X_test, prediction_titles, h, w)

# plot the gallery of the most significative eigenfaces

eigenface_titles = [&amp;quot;eigenface %d&amp;quot; % i for i in range(eigenfaces.shape[0])]
plot_gallery(eigenfaces, eigenface_titles, h, w)

plt.show()

&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Detect Network Connection (Dull Way)</title>
      <link>https://cheioKID.github.io/post/note/detect-network-connection/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/detect-network-connection/</guid>
      
        <description>&lt;p&gt;今天搞错了，盲目的查了好久怎么写，又测试了老半天，结果不是让我写的&lt;/p&gt;

&lt;p&gt;我写的时候就一直奇怪为什么要让我写这么难的东西，根本不好实现，弄的我午饭都没好好吃&lt;/p&gt;

&lt;p&gt;因为要删掉了，所以记下来纪念我空耗的两小时&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Constant.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static boolean isConnectedToNetwork(){
		try {
			int timeout = 2000;
			InetAddress[] addresses = InetAddress.getAllByName(&amp;quot;www.baidu.com&amp;quot;);
			for (InetAddress address : addresses) {
				if (address.isReachable(timeout)) {
					return true;
				}
			}
		} catch (UnknownHostException e) {
			return false;
		} catch (IOException e) {
			e.printStackTrace();
		}
		return true;
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;CaseTreeView.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;exec2.scheduleWithFixedDelay(new Runnable(){
            public void run() {

                if (null != reqParameter.getStrategy() &amp;amp;&amp;amp; !((LongSimplexLinkServerStrategyImpl) reqParameter.getStrategy()).isClientConnected()) {
                    isNetworkAvailable = false;
                    System.out.println(&amp;quot;......................连接已断开&amp;quot;);
                }

                if (!isNetworkAvailable) {
                    if (Constant.isConnectedToNetwork()) {
                        Thread thread = new Thread(new MyClientThread(reqParameter));
                        thread.start();
                        opPanel.unlink.setEnabled(true);
                        getLatestUsedValueFromDB();
                        isNetworkAvailable = true;
                        System.out.println(&amp;quot;......................已重新连接&amp;quot;);
                    }
                }

            }
        }, 10, 10, TimeUnit.SECONDS);
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Know LSTM</title>
      <link>https://cheioKID.github.io/post/machine-learning/to-know-lstm/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/machine-learning/to-know-lstm/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://tensorflow.google.cn/tutorials/sequences/text_generation&#34;&gt;生成句子CNN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tensorflow.google.cn/tutorials/sequences/recurrent#lstm&#34;&gt;预测单词LSTM&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;背景知识&#34;&gt;背景知识&lt;/h2&gt;

&lt;h3 id=&#34;rnn&#34;&gt;RNN&lt;/h3&gt;

&lt;p&gt;循环神经网络的隐藏层中，输出不仅取决于当前的输入还取决于上一时间隐藏层的输出结果。&lt;/p&gt;

&lt;p&gt;可以看到RNN包含历史信息（A recurrent neural network can be thought of as multiple copies of the same network, each passing a message to a successor.）&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-unrolled.png&#34; alt=&#34;An unrolled recurrent neural network.&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;RNN可以将历史信息关联到当前的任务中，比如根据视频的历史帧赋予对当前帧的理解（One of the appeals of RNNs is the idea that they might be able to connect previous information to the present task, such as using previous video frames might inform the understanding of the present frame.）&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://colah.github.io/posts/2015-08-Understanding-LSTMs/img/RNN-shorttermdepdencies.png&#34; alt=&#34;p1&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;如果相关信息和所需位置的差距很小，RNN就可以学习使用过去的信息（In such cases, where the gap between the relevant information and the place that it’s needed is small, RNNs can learn to use the past information.）&lt;/p&gt;

&lt;p&gt;随着预测信息和相关信息间的&lt;strong&gt;间隔增大&lt;/strong&gt;，RNN逐渐失去对较远数据的关联能力（context from further back），因而无法预测长序列。（vanishing gradient problem）&lt;/p&gt;

&lt;p&gt;理论上RNN是可以处理这种long-term dependencies的，但这确实很难（&lt;a href=&#34;http://people.idsia.ch/~juergen/SeppHochreiter1991ThesisAdvisorSchmidhuber.pdf&#34;&gt;Hochreiter (1991)&lt;/a&gt; and &lt;a href=&#34;http://www-dsi.ing.unifi.it/~paolo/ps/tnn-94-gradient.pdf&#34;&gt;Bengio, et al. (1994)&lt;/a&gt;）。而LSTM没有这种问题。&lt;/p&gt;

&lt;h3 id=&#34;lstm&#34;&gt;LSTM&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://colah.github.io/posts/2015-08-Understanding-LSTMs/&#34;&gt;https://colah.github.io/posts/2015-08-Understanding-LSTMs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LSTM旨在避免long-term dependency 问题，记住长时间的信息是它的默认行为，所以它当然可以进行长序列的学习预测（ &lt;a href=&#34;http://www.bioinf.jku.at/publications/older/2604.pdf&#34;&gt;Hochreiter &amp;amp; Schmidhuber (1997)&lt;/a&gt;）。&lt;/p&gt;

&lt;p&gt;所有的神经网络都有链式的重复模块，普通的RNN隐藏层中只含有单一的tanh层。而LSTM有四个相互作用的层，其隐藏层使用了遗忘门、传入门、输出门几个相互作用的层。&lt;/p&gt;

&lt;p&gt;&lt;figure&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/3/3b/The_LSTM_cell.png&#34; alt=&#34;lstm&#34;&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;h4 id=&#34;lstm的基本结构&#34;&gt;LSTM的基本结构&lt;/h4&gt;

&lt;p&gt;Cell state 像传送带一样使信息保持不变的向前流动，在此期间有较少的线性交互。LSTM并不直接的更改 cell state 信息，而是由 gate 来控制，gate 实际上就是由 sigmoid 和点乘操作组成的门。Sigmoid通过输出介于[0,1]之间实数表示信息通过的量。LSTM有三个这样的 gate 。&lt;/p&gt;

&lt;h5 id=&#34;详细的步骤&#34;&gt;详细的步骤&lt;/h5&gt;

&lt;p&gt;如果想要 cell state 遗忘某些信息，LSTM 中的“遗忘门”（forget gate layer）可以达到这种效果。它的输入是上一步隐藏层 &lt;span  class=&#34;math&#34;&gt;\(h_{t-1}\)&lt;/span&gt; 和当前输入值 &lt;span  class=&#34;math&#34;&gt;\(x_t\)&lt;/span&gt; ，为 cell state 中的每个值都输出一个[0,1]之间的值，表示忘记的程度。&lt;/p&gt;

&lt;p&gt;如果想要将一些新的信息存入 cell state 中，首先，采用“传入门”（input gate layer）来决定被更新的信息，接着，tanh layer 创建一个新的候选值 &lt;span  class=&#34;math&#34;&gt;\(\tilde{C}_t\)&lt;/span&gt; ，最后组合这两个值来更新 state。&lt;/p&gt;

&lt;p&gt;最后，先根据 Sigmoid 决定 cell state 的输出部分，然后和tanh的值相乘，得到输出结果。&lt;/p&gt;

&lt;h4 id=&#34;其它不同的派生&#34;&gt;其它不同的派生&lt;/h4&gt;

&lt;p&gt;Peephole connections，gate layers 可以直接获得 cell state。&lt;/p&gt;

&lt;p&gt;Coupled forget and input gates，不同于单独处理忘记的信息和传入的信息，忘记和传入的信息同时处理。在传入一些信息的时候才会忘记这些信息，在忘记一些旧的信息的时候才会传入新的信息。&lt;/p&gt;

&lt;p&gt;Gated Recurrent Unit，将忘记和传入门结合为一个单独的“更新门”，融合了 cell state 和 hidden state。&lt;/p&gt;

&lt;h2 id=&#34;样例代码&#34;&gt;样例代码&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://tensorflow.google.cn/tutorials/sequences/recurrent&#34;&gt;tutorial&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;该模型的核心由一个 LSTM 单元组成，该单元一次处理一个字词，并计算句子中下一个字词的可能值的概率。该网络的内存状态初始化为零矢量，并在读取每个字词后进行更新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可能的数据形式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt; t=0  t=1    t=2  t=3     t=4
[The, brown, fox, is,     quick]
[The, red,   fox, jumped, high]

words_in_dataset[0] = [The, The]
words_in_dataset[1] = [brown, red]
words_in_dataset[2] = [fox, fox]
words_in_dataset[3] = [is, jumped]
words_in_dataset[4] = [quick, high]
batch_size = 2, time_steps = 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;伪代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;words_in_dataset = tf.placeholder(tf.float32, [time_steps, batch_size, num_features])
lstm = tf.contrib.rnn.BasicLSTMCell(lstm_size)
# Initial state of the LSTM memory.
state = lstm.zero_state(batch_size, dtype=tf.float32)
probabilities = []
loss = 0.0
for current_batch_of_words in words_in_dataset:
    # The value of state is updated after processing each batch of words.
    output, state = lstm(current_batch_of_words, state)

    # The LSTM output can be used to make next word predictions
    logits = tf.matmul(output, softmax_w) + softmax_b
    probabilities.append(tf.nn.softmax(logits))
    loss += loss_function(probabilities, target_words)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LSTM：一组链式的Cell，指定lstm_size&lt;/p&gt;

&lt;p&gt;每个batch对应state向量中的一个值&lt;/p&gt;

&lt;p&gt;对每个batch：output, state = lstm(current_batch, state) ，state参数是从前一次迭代中得到&lt;/p&gt;

&lt;p&gt;从output获得概率&lt;/p&gt;

&lt;p&gt;截断的反向传播算法：处理每批后回馈长度为 &lt;code&gt;num_steps&lt;/code&gt; 的输入&lt;/p&gt;

&lt;p&gt;stack LSTM：&lt;code&gt;tf.contrib.rnn.MultiRNNCell&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;结果：（困惑度）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Epoch: 8 Train Perplexity: 50.858
Epoch: 8 Valid Perplexity: 127.851

===========================================
| config | epochs | train | valid  | test
===========================================
| small  | 13     | 37.99 | 121.39 | 115.91
| medium | 39     | 48.45 |  86.16 |  82.07
| large  | 55     | 37.87 |  82.62 |  78.29
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Install OpenCV and Compile cpp file for MAC</title>
      <link>https://cheioKID.github.io/post/opencv/install-opencv-and-compile-cpp/</link>
      <pubDate>Wed, 28 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/opencv/install-opencv-and-compile-cpp/</guid>
      
        <description>

&lt;h1 id=&#34;install-opencv-and-compile-cpp-file-for-mac&#34;&gt;Install OpenCV and Compile cpp file for Mac&lt;/h1&gt;

&lt;h4 id=&#34;安装opencv2&#34;&gt;安装OpenCV2&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install opencv@2
echo &#39;export PATH=&amp;quot;/usr/local/opt/opencv@2/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.zshrc
export LDFLAGS=&amp;quot;-L/usr/local/opt/opencv@2/lib&amp;quot;
export CPPFLAGS=&amp;quot;-I/usr/local/opt/opencv@2/include&amp;quot;
export PKG_CONFIG_PATH=&amp;quot;/usr/local/opt/opencv@2/lib/pkgconfig&amp;quot;
# 不知道这些环境变量是不是必要的，但还是按照提示执行了
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;编译c-程序&#34;&gt;编译C++程序&lt;/h4&gt;

&lt;p&gt;安装cmake&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install cmake
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;demo程序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;quot;opencv/cv.h&amp;quot;
#include &amp;quot;opencv/highgui.h&amp;quot;

using namespace cv;

int main(int, char**)
{
    VideoCapture cap(0);
    if(!cap.isOpened()) return -1;

    Mat frame, edges;
    namedWindow(&amp;quot;edges&amp;quot;,1);
    for(;;)
    {
        cap &amp;gt;&amp;gt; frame;
        cvtColor(frame, edges, CV_BGR2GRAY);
        GaussianBlur(edges, edges, Size(7,7), 1.5, 1.5);
        Canny(edges, edges, 0, 30, 3);
        imshow(&amp;quot;edges&amp;quot;, edges);
        if(waitKey(30) &amp;gt;= 0) break;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CMakeLists.txt&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;cmake_minimum_required(VERSION 2.8)
project( demo )
find_package( OpenCV REQUIRED )
add_executable( demo demo.cpp )
target_link_libraries( demo ${OpenCV_LIBS} )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译demo.cpp&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmake .
make
./demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpenCV程序中\^C终止，\^Z会挂起，停止响应。Ubuntu中是\^Z终止。&lt;/p&gt;

&lt;h4 id=&#34;运行python程序&#34;&gt;运行Python程序&lt;/h4&gt;

&lt;p&gt;下载&lt;code&gt;numpy-1.15.4&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd numpy-1.15.4
sudo python setup.py build
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import sys
#sys.path.append(&#39;/Library/Python/2.7/site-packages/&#39;)
#import numpy
sys.path.append(&#39;/usr/local/Cellar/opencv@2/2.4.13.7/lib/python2.7/site-packages&#39;)
import cv2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以设置&lt;code&gt;PYTHONPATH&lt;/code&gt;环境变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PYTHONPATH=/Library/Python/2.7/site-packages:/usr/local/Cellar/opencv@2/2.4.13.7/lib/python2.7/site-packages:$PYTHONPATH
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Symphony-No.9</title>
      <link>https://cheioKID.github.io/post/music/symphony-no.9/</link>
      <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/music/symphony-no.9/</guid>
      
        <description>

&lt;h2 id=&#34;edition-1&#34;&gt;Edition 1&lt;/h2&gt;

&lt;p&gt;Froh, froh, wie seine Sonnen, seine Sonnen fliegen,&lt;/p&gt;

&lt;p&gt;froh wie, seine, Sonnen, fliegen,&lt;/p&gt;

&lt;p&gt;durch des Himmels prächt&amp;rsquo;gen Plan,&lt;/p&gt;

&lt;p&gt;laufet, Brüder, eure Bahn,&lt;/p&gt;

&lt;p&gt;laufet, Brüder, eure Bahn,&lt;/p&gt;

&lt;p&gt;Freudig, wie ein Held zum Siegen,&lt;/p&gt;

&lt;p&gt;wie ein Held zum Siegen,&lt;/p&gt;

&lt;p&gt;laufet, Brüder, eure Bahn,&lt;/p&gt;

&lt;p&gt;wie ein Held zum Siegen.&lt;/p&gt;

&lt;p&gt;(合唱)&lt;/p&gt;

&lt;p&gt;Freude, schöner Götterfunken&lt;/p&gt;

&lt;p&gt;Tochter aus Elysium,&lt;/p&gt;

&lt;p&gt;Wir betreten feuertrunken,&lt;/p&gt;

&lt;p&gt;Himmlische, dein Heiligtum!&lt;/p&gt;

&lt;p&gt;Deine Zauber binden wieder&lt;/p&gt;

&lt;p&gt;Was die Mode streng geteilt;&lt;/p&gt;

&lt;p&gt;Alle Menschen werden Brüder,&lt;/p&gt;

&lt;p&gt;Wo dein sanfter Flügel weilt.&lt;/p&gt;

&lt;p&gt;Deine Zauber binden wieder&lt;/p&gt;

&lt;p&gt;Was die Mode streng geteilt;&lt;/p&gt;

&lt;p&gt;Alle Menschen werden Brüder,&lt;/p&gt;

&lt;p&gt;Wo dein sanfter Flügel weilt. (合唱)&lt;/p&gt;

&lt;h2 id=&#34;draft&#34;&gt;Draft&lt;/h2&gt;

&lt;p&gt;O Freunde, nicht diese Töne!&lt;/p&gt;

&lt;p&gt;Sondern laßt uns&lt;/p&gt;

&lt;p&gt;angenehmere anstimmen,&lt;/p&gt;

&lt;p&gt;und freudenvollere.&lt;/p&gt;

&lt;p&gt;Freude! Freude!&lt;/p&gt;

&lt;p&gt;Wem der große Wurf gelungen,&lt;/p&gt;

&lt;p&gt;Eines Freundes Freund zu sein;&lt;/p&gt;

&lt;p&gt;Wer ein holdes Weib errungen,&lt;/p&gt;

&lt;p&gt;Mische seinen Jubel ein!&lt;/p&gt;

&lt;p&gt;Ja, wer auch nur eine Seele&lt;/p&gt;

&lt;p&gt;Sein nennt auf dem Erdenrund!&lt;/p&gt;

&lt;p&gt;Und wer&amp;rsquo;s nie gekonnt, der stehle&lt;/p&gt;

&lt;p&gt;Weinend sich aus diesem Bund!&lt;/p&gt;

&lt;p&gt;Ja, wer auch nur eine Seele&lt;/p&gt;

&lt;p&gt;Sein nennt auf dem Erdenrund!&lt;/p&gt;

&lt;p&gt;Und wer&amp;rsquo;s nie gekonnt, der stehle&lt;/p&gt;

&lt;p&gt;Weinend sich aus diesem Bund!&lt;/p&gt;

&lt;p&gt;Freude trinken alle Wesen&lt;/p&gt;

&lt;p&gt;An den Brüsten der Natur;&lt;/p&gt;

&lt;p&gt;Alle Guten, alle Bösen&lt;/p&gt;

&lt;p&gt;Folgen ihrer Rosenspur.&lt;/p&gt;

&lt;p&gt;Küße gab sie uns und Reben,&lt;/p&gt;

&lt;p&gt;Einen Freund, geprüft im Tod;&lt;/p&gt;

&lt;p&gt;Wollust ward dem Wurm gegeben,&lt;/p&gt;

&lt;p&gt;Und der Cherub steht vor Gott.&lt;/p&gt;

&lt;p&gt;Froh, wie seine Sonnen fliegen&lt;/p&gt;

&lt;p&gt;Durch des Himmels prächt&amp;rsquo;gen Plan,&lt;/p&gt;

&lt;p&gt;Laufet, Brüder, eure Bahn,&lt;/p&gt;

&lt;p&gt;Freudig, wie ein Held zum Siegen.&lt;/p&gt;

&lt;p&gt;Seid umschlungen, Millionen!&lt;/p&gt;

&lt;p&gt;Diesen Kuß der ganzen Welt!&lt;/p&gt;

&lt;p&gt;Brüder, über&amp;rsquo;m Sternenzelt&lt;/p&gt;

&lt;p&gt;Muss ein lieber Vater wohnen.&lt;/p&gt;

&lt;p&gt;Ihr stürzt nieder, Millionen?&lt;/p&gt;

&lt;p&gt;Ahnest du den Schöpfer, Welt?&lt;/p&gt;

&lt;p&gt;Such&amp;rsquo; ihn über&amp;rsquo;m Sternenzelt!&lt;/p&gt;

&lt;p&gt;Über Sternen muss er wohnen.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;O Freunde, nicht diese Töne!
Sondern laßt uns angenehmere anstimmen,
und freudenvollere.
Freude! (men&amp;rsquo;s chorus: Freude! )
Freude! (chorus again: Freude! )
Freude, schöner Götterfunken*
Tochter aus Elysium,
Wir betreten feuertrunken,
Himmlische, dein Heiligtum!
Deine Zauber binden wieder
Was die Mode streng geteilt;
Alle Menschen werden Brüder,
Wo dein sanfter Flügel weilt.
Wem der große Wurf gelungen,
Eines Freundes Freund zu sein;
Wer ein holdes Weib errungen,
Mische seinen Jubel ein!
Ja, wer auch nur eine Seele
Sein nennt auf dem Erdenrund!
Und wer&amp;rsquo;s nie gekonnt, der stehle
Weinend sich aus diesem Bund!
Freude trinken alle Wesen
An den Brüsten der Natur;
Alle Guten, alle Bösen
Folgen ihrer Rosenspur.
Küße gab sie uns und Reben,
Einen Freund, geprüft im Tod;
Wollust ward dem Wurm gegeben,
Und der Cherub steht vor Gott.
Vor Gott!
Froh, wie seine Sonnen fliegen
Durch des Himmels prächt&amp;rsquo;gen Plan,
Laufet, Brüder, eure Bahn,
Freudig, wie ein Held zum Siegen.
Seid umschlungen, Millionen!
Diesen Kuß der ganzen Welt!
Brüder, über&amp;rsquo;m Sternenzelt
Muss ein lieber Vater wohnen.
Ihr stürzt nieder, Millionen?
Ahnest du den Schöpfer, Welt?
Such&amp;rsquo; ihn über&amp;rsquo;m Sternenzelt!
Über Sternen muss er wohnen.
Finale repeats the words:
Seid umschlungen, Millionen!
Diesen Kuß der ganzen Welt!
Brüder, über&amp;rsquo;m Sternenzelt
Muss ein lieber Vater wohnen.
Seid umschlungen,
Diesen Kuß der ganzen Welt!
Freude, schöner Götterfunken
Tochter aus Elysium,
Freude, schöner Götterfunken
Götterfunken!&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>匹配非ASC字符</title>
      <link>https://cheioKID.github.io/post/note/non-asc-character/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/non-asc-character/</guid>
      
        <description>&lt;p&gt;复制的代码里面有非ASC II的字符，百度了一下，可以通过匹配正则表达式&lt;code&gt;[^\x00-\x7f]&lt;/code&gt;来查找替换&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[^\x00-\x7f]
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Java moveFile IOException Solution</title>
      <link>https://cheioKID.github.io/post/note/java-io-delete-win/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/java-io-delete-win/</guid>
      
        <description>&lt;p&gt;在Mac上无误的程序&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
    FileUtils.moveFile(file, target);//用renameTo方法也可以，但是win里都没有抛出异常，才改用FileUtils.moveFile
    isRenamed = true;
} catch (Exception e) { 
    Log.error(e.toString());
    e.printStackTrace();
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到win上抛出异常，不能重命名文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;java.io.IOException: Failed to delete original file &#39;C:\***\******\************.txt&#39; after copy to &#39;C:\***\******\************.txt.114110&#39;
        at org.apache.commons.io.FileUtils.moveFile(FileUtils.java:3011)
        at com.example.sms.LocalUtil.renameFile(LocalUtil.java:125)
        at com.example.sms.SendSMS.main(SendSMS.java:152)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但是发现如果没有从FTP上下载，重命名是没有问题的&lt;/p&gt;

&lt;p&gt;看了一下&lt;code&gt;FileUtil.moveFile()&lt;/code&gt;的源码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void moveFile(final File srcFile, final File destFile) throws IOException {
    if (srcFile == null) {
        throw new NullPointerException(&amp;quot;Source must not be null&amp;quot;);
    }
    if (destFile == null) {
        throw new NullPointerException(&amp;quot;Destination must not be null&amp;quot;);
    }
    if (!srcFile.exists()) {
        throw new FileNotFoundException(&amp;quot;Source &#39;&amp;quot; + srcFile + &amp;quot;&#39; does not exist&amp;quot;);
    }
    if (srcFile.isDirectory()) {
        throw new IOException(&amp;quot;Source &#39;&amp;quot; + srcFile + &amp;quot;&#39; is a directory&amp;quot;);
    }
    if (destFile.exists()) {
        throw new FileExistsException(&amp;quot;Destination &#39;&amp;quot; + destFile + &amp;quot;&#39; already exists&amp;quot;);
    }
    if (destFile.isDirectory()) {
        throw new IOException(&amp;quot;Destination &#39;&amp;quot; + destFile + &amp;quot;&#39; is a directory&amp;quot;);
    }
    final boolean rename = srcFile.renameTo(destFile);
    if (!rename) {
        copyFile(srcFile, destFile);
        if (!srcFile.delete()) {
            FileUtils.deleteQuietly(destFile);
            throw new IOException(&amp;quot;Failed to delete original file &#39;&amp;quot; + srcFile + &amp;quot;&#39; after copy to &#39;&amp;quot; + destFile + &amp;quot;&#39;&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;试了一下把&lt;code&gt;移动&lt;/code&gt;改为&lt;code&gt;复制&lt;/code&gt;和&lt;code&gt;沉默删除&lt;/code&gt;两个过程的组合，就可以成功的移动了，真是搞不懂&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
    FileUtils.copyFile(file, target);
    FileUtils.deleteQuietly(file);
    //FileUtils.moveFile(file, target);
    isRenamed = true;
} catch (Exception e) { 
    Log.error(e.toString());
    e.printStackTrace();
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;每次在Mac上写好的程序都要在Windows上面Debug，Windows真难对付&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;花了好多时间搜索中英文结果，最后还是看源码解决了。作为菜鸟感觉源码好精致==，以后有时间多看看优秀的人写的代码。忘记是去年还是今年学过Scala的语法，有机会去学习一下Spark的写法。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;还是2018年9月12日&lt;/p&gt;

&lt;p&gt;最后发现只有最后一个文件被移动了，之前的都移动失败了&lt;/p&gt;

&lt;p&gt;百度了一下，有一种说法是&lt;code&gt;文件流未关闭&lt;/code&gt;的问题，试了无效&lt;/p&gt;

&lt;p&gt;另一种说法是进行&lt;code&gt;垃圾回收&lt;/code&gt;，虽然我也知道垃圾很多，但是没想到垃圾回收能解决这个问题。而且是在Mac上没问题，只出现在Windows上的问题。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
	System.gc();
	FileUtils.moveFile(file, target);
	isRenamed = true;

} catch (Exception e) { 
    Log.error(e.toString());
    e.printStackTrace();
    return false;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;其实开发的时候也考虑过好多对象没有被释放，我一直以为垃圾回收是及时的。头一回碰到这种情况。到底什么时候要进行垃圾回收呢，我还没有思考过这个问题，有时间去看书吧。不过接下来要开始写Swing程序了，随缘吧。&lt;/em&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Java FTP timeout Solution</title>
      <link>https://cheioKID.github.io/post/note/java-ftp/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/java-ftp/</guid>
      
        <description>&lt;p&gt;因为API响应太久，FTP连接已经断开，会抛出异常&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;org.apache.commons.net.ftp.FTPConnectionClosedException: FTP response 421 received.  Server closed connection.
2018-09-11 11:38:09,082 [main] ERROR com.example.sms.FtpUtil - fetch 1st waiting file error
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:388)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:300)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:523)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:648)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:622)
	at org.apache.commons.net.ftp.FTP.pasv(FTP.java:1045)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:895)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:785)
	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3409)
	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3339)
	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:3016)
	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:3069)
	at com.example.sms.test.main(test.java:126)
org.apache.commons.net.ftp.FTPConnectionClosedException: FTP response 421 received.  Server closed connection.
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:388)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:300)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:523)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:648)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:622)
	at org.apache.commons.net.ftp.FTP.pasv(FTP.java:1045)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:895)
	at org.apache.commons.net.ftp.FTPClient._openDataConnection_(FTPClient.java:785)
	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3409)
	at org.apache.commons.net.ftp.FTPClient.initiateListParsing(FTPClient.java:3339)
	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:3016)
	at org.apache.commons.net.ftp.FTPClient.listFiles(FTPClient.java:3069)
	at com.example.sms.FtpUtil.fetchOneWaitingFile(FtpUtil.java:166)
	at com.example.sms.test.main(test.java:102)
org.apache.commons.net.ftp.FTPConnectionClosedException: Connection closed without indication.
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:324)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:300)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:523)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:648)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:622)
	at org.apache.commons.net.ftp.FTP.quit(FTP.java:904)
	at org.apache.commons.net.ftp.FTPClient.logout(FTPClient.java:1148)
	at com.example.sms.test.main(test.java:138)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;试了用try catch包裹起来catch不到&lt;code&gt;FTPConnectionClosedException&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;不管是&lt;code&gt;ftpClient.isConnected()&lt;/code&gt;还是&lt;code&gt;ftpClient.isAvailable()&lt;/code&gt;或者&lt;code&gt;ftpClient.isRemoteVerificationEnabled()&lt;/code&gt;的值都为&lt;code&gt;True&lt;/code&gt;，不能判断是否连接超时。&lt;/p&gt;

&lt;p&gt;最后采用了一种拙劣的方法catch到了&lt;code&gt;FTPConnectionClosedException&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
    //used for check connection
    ftpClient.listFiles();
} catch (Exception e) {

    Log.info(e.getMessage());

    if (!ftp.login(ftp_url,ftp_port,ftp_username,ftp_password)) {
    	Log.error(&amp;quot;FTP reconnect and relogin failed with &amp;quot; + ftp_url + &amp;quot;:&amp;quot; + ftp_port + &amp;quot;,username: &amp;quot; + ftp_username + &amp;quot;,password: &amp;quot; + ftp_password);
    } else {
    	Log.info(&amp;quot;successfully relogin for time out exception&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Cross Compile for Arm</title>
      <link>https://cheioKID.github.io/post/cs/cross-compile/</link>
      <pubDate>Tue, 03 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/cs/cross-compile/</guid>
      
        <description>

&lt;h2 id=&#34;安装交叉编译&#34;&gt;安装交叉编译&lt;/h2&gt;

&lt;h4 id=&#34;克隆编译器&#34;&gt;克隆编译器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/xupsh/CodeSourcery.git
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Sourcery CodeBench contains the complete GNUToolchain including all of the following components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CodeSourcery Debug Sprite for ARM&lt;br /&gt;
  GNU Binary Utilities (Binutils)
  GNU C Compiler (GCC)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GNU C Library (GLIBC)
  GNU C++ Compiler (G++)&lt;br /&gt;
  GNU C++ Runtime Library (Libstdc++)
  GNU Debug Server (GDBServer)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;GNU Debugger (GDB)Visit:  &lt;a href=&#34;http://www.codesourcery.comto&#34;&gt;http://www.codesourcery.comto&lt;/a&gt; access the Sourcery CodeBench support website.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;设置环境变量&#34;&gt;设置环境变量&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export CROSS_COMPILE=arm-xilinx-linux-gnueabi-
export PATH=/home/cheio/CrossCompile/CodeSourcery/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;可能出现的错误&#34;&gt;可能出现的错误：&lt;/h4&gt;

&lt;p&gt;./arm-none-linux-gnueabi-gcc: 没有那个文件或目录
&amp;gt; LSB（Linux Standards Base）是一套核心标准，它保证了LINUX发行版同LINUX应用程序之间的良好结合&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install lsb-core
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;安装完成-执行&#34;&gt;安装完成，执行&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;arm-xilinx-linux-gnueabi-gcc -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到正确的输出&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;gcc version 4.7.2 (Sourcery CodeBench Lite 2012.09-104)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;可以进行交叉编译&#34;&gt;可以进行交叉编译&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;arm-xilinx-linux-gnueabi-gcc -o b testcp.c
# 但是会出现bash识别不了的错误
# 采用静态库编译可以成功运行
arm-xilinx-linux-gnueabi-gcc -static -o c testcp.c
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;安装文件&#34;&gt;安装文件&lt;/h4&gt;

&lt;p&gt;如果不采用git，也有安装文件&lt;/p&gt;

&lt;p&gt;下载地址&lt;a href=&#34;https://pan.baidu.com/s/1nvMWAHN&#34;&gt;百度网盘&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;但是没有试过&lt;/p&gt;

&lt;h2 id=&#34;交叉编译opencv&#34;&gt;交叉编译opencv&lt;/h2&gt;

&lt;h4 id=&#34;make-gui&#34;&gt;make-gui&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;Configure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;generator为&lt;code&gt;Unix Makefiles&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;arm-linux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/home/cheio/CrossCompile/CodeSourcery/bin/arm-xilinx-linux-gnueabi-gcc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/home/cheio/CrossCompile/CodeSourcery/bin/arm-xilinx-linux-gnueabi-g++&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Target Root&lt;code&gt;/home/cheio/CrossCompile/CodeSourcery/bin&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;修改cmake的配置&#34;&gt;修改cmake的配置&lt;/h4&gt;

&lt;p&gt;cmake配置修改工作如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;（1）加上BUILD_PNG和BUILD_JPEG

（2）去掉WITH_TIFF，WITH_OPENEXR和BUILD_EXAMPLES

（3）修改CMAKE_BUILD_TYPE为Release

（4）修改CMAKE_INSTALL_PREFIX为/home/cheio/opencv/opencv-arm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新Configure, Generate，生成makefile文件。&lt;/p&gt;

&lt;p&gt;如果编译静态库：取消勾选&lt;code&gt;BUILD_SHARED_LIBS&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;修改编译配置&#34;&gt;修改编译配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;//Flags used by the linker.
CMAKE_EXE_LINKER_FLAGS:STRING=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmake&#34;&gt;//Flags used by the linker.
CMAKE_EXE_LINKER_FLAGS:STRING= -lpthread -lrt -ldl
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进行编译&lt;/p&gt;

&lt;h4 id=&#34;could-not-read-symbols错误&#34;&gt;Could not read symbols错误&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-plain&#34;&gt;../../3rdparty/lib/libzlib.a: could not read symbols: Bad value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入opencv目录下的3rdparty的对应目录CMakeFiles下的每个&lt;code&gt;.dir&lt;/code&gt;目录中，打开&lt;code&gt;flags.make&lt;/code&gt;，在C_FLAGS = 后添加&lt;code&gt;-O3 -fPIC&lt;/code&gt;用来支持在64位机上编译
如../3rdparty/zlib/CMakeFiles/zlib.dir/flags.make
修改&lt;code&gt;C_FLAGS =  -W -Wall&lt;/code&gt;为 &lt;code&gt;C_FLAGS =  -O3 -fPIC  -W -Wall&lt;/code&gt;
和
修改&lt;code&gt;CXX_FLAGS =  -W -Wall&lt;/code&gt;为 &lt;code&gt;C_FLAGS =  -O3 -fPIC  -W -Wall&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;安装&#34;&gt;安装&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拷到开发板/lib&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp -d libopencv_*  /media/cheio/EXT/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;拷到arm编译器lib&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp -d libopencv_* /home/cheio/CrossCompile/CodeSourcery/arm-xilinx-linux-gnueabi/lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;arm编译test&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /home/cheio/opencv/opencv-arm/include/ -L /home/cheio/opencv/opencv-arm/lib/ -lopencv_core -lopencv_highgui -lpthread -lrt -ldl -statc -o test test.cpp
# 静态库编译
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /dev | grep ttyUSB
# 用minicom连接 115200
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cheio@cuvm:~/test$ arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /home/cheio/opencv/opencv-arm/include/ -L /home/cheio/opencv/opencv-arm/lib/ -lopencv_core -lopencv_highgui -lpthread -lrt -ldl -static -o test test.cpp


g++ -Wno-psabi -I /usr/include/ -L /usr/lib/ -lopencv_core -lopencv_highgui -lpthread -lrt -ldl -o test-read test-read.cpp


g++ -Wno-psabi -lopencv_core -lopencv_highgui -lpthread -lrt -ldl -o test-read test-read.cpp

/home/cheio/CrossCompile/CodeSourcery/bin/../lib/gcc/arm-xilinx-linux-gnueabi/4.7.2/../../../../arm-xilinx-linux-gnueabi/bin/ld: cannot find -lopencv_core
/home/cheio/CrossCompile/CodeSourcery/bin/../lib/gcc/arm-xilinx-linux-gnueabi/4.7.2/../../../../arm-xilinx-linux-gnueabi/bin/ld: cannot find -lopencv_highgui
collect2: error: ld returned 1 exit status

arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /home/cheio/opencv/opencv-arm/include/ -L /home/cheio/opencv/opencv-arm/lib/ -lopencv_core -lopencv_highgui -lpthread -lrt -ldl -static -o test test.cpp


arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /home/cheio/opencv/opencv-arm/include/ -L /home/cheio/opencv/opencv-arm/lib/libopencv_core.a /home/cheio/opencv/opencv-arm/lib/libopencv_highgui.a /home/cheio/opencv/opencv-arm/lib/libopencv_imgproc.a -lpthread -lrt -ldl -static -o test-read test-read.cpp


arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /home/cheio/opencv/opencv-arm/include/ -L /home/cheio/opencv/opencv-arm/lib/libopencv_core.a /home/cheio/opencv/opencv-arm/lib/libopencv_highgui.a -lpthread -lrt -ldl -static test.cpp -o test


arm-xilinx-linux-gnueabi-g++ -Wno-psabi -I /usr/local/opencv/install_opencv/include/opencv/ -L /usr/local/opencv/install_opencv/lib/ -lopencv_core -lopencv_highgui -lpthread -lrt -o test test.cpp


&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# Package Information for pkg-config
prefix=/home/cheio/opencv/opencv-arm
exec_prefix=${prefix}
libdir=${exec_prefix}/lib
includedir_old=${prefix}/include/opencv
includedir_new=${prefix}/include
Name: OpenCV
Description: Open Source Computer Vision Library
Version: 2.4.10
Libs: -L${libdir} -lopencv_core -lopencv_imgproc -lopencv_highgui -lopencv_ml -lopencv_video -lopencv_features2d -lopencv_calib3d -lopencv_objdetect -lopencv_contrib -lopencv_legacy -lopencv_flann
cflags: -I${includedir_old} -I${includedir_new}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/cheio/opencv/opencv-arm/pkgconfig
export PKG_CONFIG_PATH
arm-xilinx-linux-gnueabi-g++ `pkg-config --cflags opencv-arm` `pkg-config –libs opencv-arm` -lpthread -lrt -static -o test-read test-read.cpp
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;CC = /home/cheio/CrossCompile/CodeSourcery/bin/arm-xilinx-linux-gnueabi-g++
#AR = /usr/bin/arm-linux-gnueabihf-ar
CFLAGS += -I./include
LDFLAGS = -lstdc++  -lrt -lpthread
LDFLAGS += -L./libs/opencv -lopencv_core -lopencv_highgui -lopencv_imgproc -lm
LDFLAGS += -L./libs/3rd -lzlib
 
TARGET =  test-read
#TARGET = libXXX.a
(TARGET) : test-read.o
	$(CC) -o $(TARGET) $^ $(LDFLAGS) -static
       #$(AR) r $(TARGET) $^
 
test.o: test-read.cpp
	$(CC) -c $(CFLAGS) $^
 
clean :
	rm -rf test-read.o $(TARGET)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/cheio/opencv/opencv-arm/pkgconfig
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Install more than one Kernel for Ubuntu Linux</title>
      <link>https://cheioKID.github.io/post/cs/ubuntu-kernel/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/cs/ubuntu-kernel/</guid>
      
        <description>&lt;p&gt;Ubuntu 内核&lt;/p&gt;

&lt;p&gt;修改源&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp /etc/apt/sources.list /etc/apt/sources.list_bak
sudo vim /etc/apt/sources.list
deb http://security.ubuntu.com/ubuntu trusty-security main
sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装内核3.16&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install linux-image-extra-3.16.0-43-generic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看内核是否安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -l | grep 3.16.0-43-generic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改grub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo gedit /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将&lt;code&gt;GRUB_DEFAULT=0&lt;/code&gt;替换为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GRUB_DEFAULT=&amp;quot;1&amp;gt;3&amp;quot;
#一级菜单选项1下的第4个选项
#默认选择
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注释这一行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#GRUB_HIDDEN_TIMEOUT=0
#注释这一行
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更新grub&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo update-grub
sudo reboot
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>LL(1) Grammer</title>
      <link>https://cheioKID.github.io/post/cs/ll1/</link>
      <pubDate>Fri, 15 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/cs/ll1/</guid>
      
        <description>

&lt;h4 id=&#34;ll-1-分析表的构造&#34;&gt;LL(1)分析表的构造&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;LL(1)文法没有公共左因子，也不含左递归，并且不是二义的。根据文法可以得到FIRST和FOLLOW集合，如果文法的任意两个产生式A→𝛼|𝛽，FIRST(𝛼) 和FIRST(𝛽)交集为空，即没有公共左因子，若𝛽经过若干步推导为𝜀，那么FIRST(𝛼) 和FOLLOW(A)交集为空，那么𝛽→𝜀的情况就是具体的，也不存在任何冲突。这样的文法就属于LL(1)文法。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;根据FIRST和FOLLOW集合可以的到LL(1)分析表，分析表的行对应非终结符，列对应终结符，将每个产生式根据产生式左部的非终结符和产生式右部的FIRST集合填入分析表，如果是推出𝜀的情况，需要根据产生式右部的FOLLOW集合来确定，如果某个非终结符属于产生式右部的FOLLOW集合，那么将该产生式填入分析表。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;采用LL(1)文法预测分析过程中没有左递归导致的无限循环，也没有公共左因子导致的回溯现象，根据预测分析表，每一步的推到都是确定的。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;预测分析过程&#34;&gt;预测分析过程&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;预测分析器中，符号栈初始状态下只有一个开始符号，开始符号根据输入栈栈顶的字符进行推导。&lt;/li&gt;
&lt;li&gt;如果符号栈栈顶为非终结符，根据该非终结符和面临的输入栈栈顶的终结符可以得到产生式动作，将符号栈栈顶的产生式左部推导为产生式右部。推导的过程中，产生式左部的字符即符号栈栈顶的字符出栈后，产生式右部压栈。因为预测分析采用最左推导，所以采用反序压栈，使最左边的非终结符在出现在栈顶，优先被推导。如果该非终结符和面临的输入栈栈顶的终结符在LL(1)分析表中没有对应的产生式动作，则出错。&lt;/li&gt;
&lt;li&gt;如果符号栈栈顶为终结符，判断是否和面临的输出栈栈顶的终结符匹配，如果匹配，两个栈的栈顶元素都出栈，继续分析下一个栈顶符号。如果不匹配则出错情况。&lt;/li&gt;
&lt;li&gt;循环到符号栈和输入栈都为空，则预测分析完毕。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;紧急错误恢复&#34;&gt;紧急错误恢复&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;紧急错误恢复是一种简单的错误恢复方法，发现错误时弹出输入记号，直到输入记号属于同步记号集为止。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果终结符在栈顶但是不匹配，最简单的方法就是弹出这个终结符，然后继续分析栈顶记号。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;非终结符的FOLLOW集合中的终结符可以作为该非终结符的同步记号，这样可以保证错误恢复后的文法属于LL(1)文法。在实验中采用了这种做法，当得到sync时，弹出栈顶的非终结符，恢复分析&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include&amp;lt;string.h&amp;gt;
#include&amp;lt;stdio.h&amp;gt;
int ll1[5][6]={{1,0,0,1,99,99},
				{0,2,0,0,3,3},
				{4,99,0,4,99,99},
				{0,6,5,0,6,6},
				{8,99,0,7,99,99}};

int main() {
	char stack[10] = {&#39;$&#39;,&#39;E&#39;};
	char input[10];
	char str[10];
	char ch;//当前看到的字符
	int i,j,m,n;
	int l = 1;//栈的大小
	int k = 0;//当前看到的字符的指针
	int action;
	int step = 1;
	int length = 0;
	
	printf(&amp;quot;请输入，输入$结束:&amp;quot;);
	do {
		scanf(&amp;quot;%c&amp;quot;,&amp;amp;ch);
		if(ch == &#39;\n&#39;)
			continue;
		input[length]=ch;
		str[length]=ch;
		length++;
	} while(ch != &#39;$&#39;);

	printf(&amp;quot;--------------------------------------------------\n&amp;quot;);
	printf(&amp;quot;No\t栈\t\t\t输入\t动作\t\t\n&amp;quot;);
	printf(&amp;quot;--------------------------------------------------\n&amp;quot;);
	
	do {
		ch=str[k];
		
		printf(&amp;quot;%d\t&amp;quot;,step);
		
		for(i=0;i&amp;lt;=l;i++)
			printf(&amp;quot;%c&amp;quot;,stack[i]);
		printf(&amp;quot;\t\t\t&amp;quot;);

		for(i=0;i&amp;lt;k;i++) {
			input[i]=&#39; &#39;;
			printf(&amp;quot;%c&amp;quot;,input[i]);
		}
		for(i=k;i&amp;lt;length;i++)
			printf(&amp;quot;%c&amp;quot;,input[i]);
		printf(&amp;quot;\t&amp;quot;);

		switch(ch) {
			case &#39;i&#39;:
				j=0;break;
			case &#39;+&#39;:
				j=1;break;
			case &#39;*&#39;:
				j=2;break;
			case &#39;(&#39;:
				j=3;break;
			case &#39;)&#39;:
				j=4;break;
			case &#39;$&#39;:
				j=5;break;
			defult:
				j=-1;break;
		}/* switch(ch)*/
		
		if(j != -1) { //看到非终结符
			if(stack[l] != ch) { //栈顶元素和当前看到的字符不匹配
				if(stack[l] != 39) { //栈顶元素为E,T,F
					switch(stack[l]) {
						case&#39;E&#39;:
							m=0; break;
						case&#39;T&#39;:
							m=2;break;
						case &#39;F&#39;:
							m=4;break;
						default:
							m=-1;break;
					}
				} else { //栈顶元素为E&#39;,T&#39;
					switch(stack[l-1]) {
						case&#39;E&#39;:
							m=1; break;
						case &#39;T&#39;:
							m=3;break;
						default:
							m=-1;break;
					}
				}/* if(stack[l]) == &#39;&#39;&#39;*/
			}/*if stack[l] != ch*/
			
			if(m != -1) { //栈顶元素为任一非终结符
				if(stack[l] != ch) { //栈顶元素和当前看到的字符不匹配
					if(stack[l] == &#39;i&#39; || 
							stack[l] == &#39;+&#39; || 
							stack[l] == &#39;*&#39; || 
							stack[l] == &#39;(&#39; || 
							stack[l] == &#39;)&#39;) {
						l=l+1;
						printf(&amp;quot;%c被弹出&amp;quot;,ch);
						step+=1;
						//break;
					}


					action=ll1[m][j]; //根据非终结符和终结符得到产生式动作
					if(action == 1) {
						printf(&amp;quot;输出E→TE&#39;\n&amp;quot;);
						n=3;
						l=l+n-1;
						stack[l]=&#39;T&#39;;
						stack[l-1]=39;
						stack[l-2]=&#39;E&#39;;
						step=step+1;
						
					} else if(action == 2) {
						printf(&amp;quot;输出E&#39;→+TE&#39;\n&amp;quot;);
						n=4;
						l=l+n-2;
						stack[l]=&#39;+&#39;;
						stack[l-1]=&#39;T&#39;;
						stack[l-2]=39;
						stack[l-3]=&#39;E&#39;;
						step = step+1;

					} else if(action == 3) {
						printf(&amp;quot;输出E&#39;→𝜀\n&amp;quot;);
						l=l-2;//无任何元素入栈
						step=step+1;

					} else if(action == 4) {
						printf(&amp;quot;输出T→FT&#39;\n&amp;quot;);
						n=3;
						l=l+n-1;
						stack[l]=&#39;F&#39;;
						stack[l-1]=39;
						stack[l-2]=&#39;T&#39;;
						step = step+1;
					} else if(action == 5) {
						printf(&amp;quot;输出T&#39;→*FT&#39;\n&amp;quot;);
						n=4;
						l=l+n-2;
						stack[l]=&#39;*&#39;;
						stack[l-1]=&#39;F&#39;;
						stack[l-2]=39;
						stack[l-3]=&#39;T&#39;;
						step = step+1;
					} else if(action == 6) {
						printf(&amp;quot;输出T&#39;→𝜀\n&amp;quot;);
						l=l-2;
						step = step+1;
					} else if(action == 7) {
						printf(&amp;quot;输出F→(E)\n&amp;quot;);
						n=3;
						l=l+n-1;
						stack[l]=&#39;(&#39;;
						stack[l-1]=&#39;E&#39;;
						stack[l-2]=&#39;)&#39;;
						step = step+1;
					} else if(action == 8) {
						printf(&amp;quot;输出F→i\n&amp;quot;);
						n=1;
						l=l+n-1;
						stack[l]=&#39;i&#39;;
						step=step+1;
					} else if(action == 0){
						printf(&amp;quot;出错：跳过%c\n&amp;quot;,ch);
						k+=1;
						step+=1;
					} else if(action == 99) {
						if(m==0 || m==2 || m==4) {
							printf(&amp;quot;出错：%c正好在%c的同步记号集合中，
									无需跳过任何记号;%c被弹出\n&amp;quot;,
									ch,stack[l],stack[l]);
							l=l-1;
						}
						else if(m==1 || m==3) {
							printf(&amp;quot;出错：%c正好在%c%c的同步记号集合中
									，无需跳过任何记号;%c%c被弹出\n&amp;quot;,
									ch,stack[l-1],stack[l],stack[l-1],stack[l]);
							l=l-2;
						}
						else
							printf(&amp;quot;不是正确的非终结符\n&amp;quot;);
					} else {
						printf(&amp;quot;未定义的错误&amp;quot;);	
					}//判断查表所得的动作

				} else { // 栈顶元素和当前看到的字符匹配
					if(ch == &#39;$&#39; &amp;amp;&amp;amp; stack[l] == &#39;$&#39;) {
						printf(&amp;quot;分析成功，结束\n&amp;quot;);
						exit(0);
					} else {
						printf(&amp;quot;匹配%c\n&amp;quot;,ch);
						l=l-1; //栈的大小减一
						k=k+1; //输入指针调整
						step+=1;
					}
				}
			} else {
				printf(&amp;quot;出错，跳过\n&amp;quot;);
				exit(0);
			} 
		} else { //没有看到正确的终结符
			printf(&amp;quot;错误的终结符\n&amp;quot;);
			exit(0);
		}
	} while(l&amp;gt;=0); //栈大小

	return 0;
}

&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Compare Appetite</title>
      <link>https://cheioKID.github.io/post/algorithm/compare-appetite/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/algorithm/compare-appetite/</guid>
      
        <description>

&lt;h1 id=&#34;compare-appetite&#34;&gt;Compare Appetite&lt;/h1&gt;

&lt;h2 id=&#34;比饭量&#34;&gt;比饭量&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;描述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3个人比饭量，每人说了两句话：
A说：B比我吃的多，C和我吃的一样多
B说：A比我吃的多，A也比C吃的多
C说：我比B吃得多，B比A吃的多。
事实上，饭量和正确断言的个数是反序的关系。
请编程按饭量的大小输出3个人的顺序。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无输入&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照饭量大小输出3人顺序，比如：
ABC&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;样例输入&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;无
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;样例输出&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;无
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
int main() {
    int a,b,c,A,B,C;
    char arr[] = &amp;quot;ABC&amp;quot;;
    for (a=0; a&amp;lt;=2; a++) {
        for (b=0; b&amp;lt;=2; b++) {
            for (c=0; c&amp;lt;=2; c++) {
                A=((b&amp;gt;a)+(c==a));
                B=((a&amp;gt;b)+(a&amp;gt;c));
                C=((c&amp;gt;b)+(b&amp;gt;a));
                if(a==0 &amp;amp;&amp;amp; A!=2) break;
                if(a==1 &amp;amp;&amp;amp; A!=1) break;
                if(a==2 &amp;amp;&amp;amp; A!=0) break;
                if(b==0 &amp;amp;&amp;amp; B!=2) break;
                if(b==1 &amp;amp;&amp;amp; B!=1) break;
                if(b==2 &amp;amp;&amp;amp; B!=0) break;
                if(c==0 &amp;amp;&amp;amp; C!=2) break;
                if(c==0 &amp;amp;&amp;amp; C==1) break;
                if(c==1 &amp;amp;&amp;amp; C!=1) break;
                if(c==2 &amp;amp;&amp;amp; C!=0) break;
                if(A+B+C == 3) {
                    int n[3],no1,no2,no3,min,i,tmp;
                    n[0]=a;
                    n[1]=b;
                    n[2]=c;
                    for (i=0,min=3; i&amp;lt;3; i++) {
                        if(n[i]&amp;lt;min) {
                            min=n[i];
                            no1=i;
                        }
                    }
                    tmp=min;
                    for (i=0,min=3; i&amp;lt;3; i++) {
                        if(n[i]&amp;lt;min &amp;amp;&amp;amp; n[i]&amp;gt;tmp) {
                            min=n[i];
                            no2=i;
                        }
                    }
                    
                    for (i=0,min=tmp; i&amp;lt;3; i++) {
                        if(n[i]&amp;gt;min) {
                            min=n[i];
                            no3=i;
                        }
                    }
                    cout&amp;lt;&amp;lt;arr[no1]&amp;lt;&amp;lt;arr[no2]&amp;lt;&amp;lt;arr[no3];
                }
            }
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, there is something wrong with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;if(c==0 &amp;amp;&amp;amp; C!=2) break;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will suddenly quit the &lt;code&gt;for (c=0; c&amp;lt;=2; c++)&lt;/code&gt; circle. I wonder why, but it is still not solved.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
int main() {
    int a,b,c,A,B,C;
    char arr[] = &amp;quot;ABC&amp;quot;;
    for (a=0; a&amp;lt;=2; a++) {
        for (b=0; b&amp;lt;=2; b++) {
            for (c=0; c&amp;lt;=2; c++) {
                A=((b&amp;gt;a)+(c==a));
                B=((a&amp;gt;b)+(a&amp;gt;c));
                C=((c&amp;gt;b)+(b&amp;gt;a));
                if(a==0 &amp;amp;&amp;amp; A!=2) break;
                if(a==1 &amp;amp;&amp;amp; A!=1) break;
                if(a==2 &amp;amp;&amp;amp; A!=0) break;
                if(b==0 &amp;amp;&amp;amp; B!=2) break;
                if(b==1 &amp;amp;&amp;amp; B!=1) break;
                if(b==2 &amp;amp;&amp;amp; B!=0) break;
                //if(c==0 &amp;amp;&amp;amp; C!=2) break; what&#39;s wrong?
                if(c==0 &amp;amp;&amp;amp; C==1) break;
                if(c==1 &amp;amp;&amp;amp; C!=1) break;
                if(c==2 &amp;amp;&amp;amp; C!=0) break;
                if(A+B+C == 3) {
                    int n[3],no1,no2,no3,min,i,tmp;
                    n[0]=a;
                    n[1]=b;
                    n[2]=c;
                    for (i=0,min=3; i&amp;lt;3; i++) {
                        if(n[i]&amp;lt;min) {
                            min=n[i];
                            no1=i;
                        }
                    }
                    tmp=min;
                    for (i=0,min=3; i&amp;lt;3; i++) {
                        if(n[i]&amp;lt;min &amp;amp;&amp;amp; n[i]&amp;gt;tmp) {
                            min=n[i];
                            no2=i;
                        }
                    }
                    
                    for (i=0,min=tmp; i&amp;lt;3; i++) {
                        if(n[i]&amp;gt;min) {
                            min=n[i];
                            no3=i;
                        }
                    }
                    cout&amp;lt;&amp;lt;arr[no1]&amp;lt;&amp;lt;arr[no2]&amp;lt;&amp;lt;arr[no3];
                }
            }
        }
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is &lt;code&gt;Assertion&lt;/code&gt; problem, we can use&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;A=((b&amp;gt;a)+(c==a));
B=((a&amp;gt;b)+(a&amp;gt;c));
C=((c&amp;gt;b)+(b&amp;gt;a));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to get true assertions&amp;rsquo; numbers. Thanks to &lt;code&gt;C&lt;/code&gt; &amp;rsquo;s feature, true means &lt;code&gt;1&lt;/code&gt; , false means &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Cycling competition</title>
      <link>https://cheioKID.github.io/post/algorithm/cycling-competition/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/algorithm/cycling-competition/</guid>
      
        <description>

&lt;h1 id=&#34;cycling-competition&#34;&gt;Cycling competition&lt;/h1&gt;

&lt;h2 id=&#34;循环比赛&#34;&gt;循环比赛&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;描述&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设有N个选手的循环比赛。其中N=2^M(2的M次方)，要求每名选手要与其他N-1名选手都赛一次，每名选手每天比赛一次，循环赛共进行N-1天，要求每天没有选手轮空。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输入&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;M&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;表格形式的比赛安排表&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;样例输入&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  3
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;样例输出&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  1 2 3 4 5 6 7 8 
  2 1 4 3 6 5 8 7
  3 4 1 2 7 8 5 6
  4 3 2 1 8 7 6 5
  5 6 7 8 1 2 3 4
  6 5 8 7 2 1 4 3
  7 8 5 6 3 4 1 2
  8 7 6 5 4 3 2 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;M的大小不会超过8&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;#include &amp;lt;iostream&amp;gt;
using namespace std;
int table[256][256]={0};
void match(int n) {
    int size=1&amp;lt;&amp;lt;n;
    int half=size/2;
    if(n==1) {
        table[0][0]=1;
        table[0][1]=2;
        table[1][0]=2;
        table[1][1]=1;
    } else {
        match(n-1);
        for (int i=0; i&amp;lt;half; i++) {
            for (int j=0; j&amp;lt;half; j++) {
                table[half+i][half+j]=table[i][j];
                table[i][half+j]=table[i][j]+half;
                table[i+half][j]=table[i][j]+half;
            }
        }
    }
}
int main() {
    int n;
    cin&amp;gt;&amp;gt;n;
    int size=1&amp;lt;&amp;lt;n;
    match(n);
    for (int i=0; i&amp;lt;size; i++) {
        for (int j=0; j&amp;lt;size; j++) {
            cout&amp;lt;&amp;lt;table[i][j]&amp;lt;&amp;lt;&amp;quot; &amp;quot;;
        }
        cout&amp;lt;&amp;lt;endl;
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Deploy Hugo on github.io</title>
      <link>https://cheioKID.github.io/post/note/deploy-hugo/</link>
      <pubDate>Sun, 25 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/deploy-hugo/</guid>
      
        <description>

&lt;p&gt;Finally it works!&lt;/p&gt;

&lt;iframe src=&#34;https://open.spotify.com/embed/track/2pNwQBjJppt8v3sZojH1aj&#34; width=&#34;300&#34; height=&#34;380&#34; frameborder=&#34;0&#34; allowtransparency=&#34;true&#34; allow=&#34;encrypted-media&#34;&gt;&lt;/iframe&gt;

&lt;h1 id=&#34;here-s-the-steps&#34;&gt;Here&amp;rsquo;s the steps&lt;/h1&gt;

&lt;h2 id=&#34;generate-new-blogs&#34;&gt;generate new blogs&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hugo new site blogs
cd blogs
git init
git remote add origin git@github.com:cheioKID/Blogs.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;change-the-baseurl-to-github-io&#34;&gt;change the baseURL to github.io&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;https://cheioKID.github.io/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apple-the-theme&#34;&gt;apple the theme&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule add -b master https://github.com/xianmin/hugo-theme-jane.git themes/jane
cp -r themes/jane/exampleSite/content ./
cp themes/jane/exampleSite/config.toml ./
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-markdown-files&#34;&gt;add markdown files&lt;/h2&gt;

&lt;p&gt;with head like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
title: &amp;quot;For example&amp;quot;
date: 2018-3-25
#lastmod: 2017-08-31T15:43:48+08:00
draft: false
tags: [&amp;quot;preview&amp;quot;, &amp;quot;English&amp;quot;, &amp;quot;tag-2&amp;quot;]
categories: [&amp;quot;English&amp;quot;, &amp;quot;index&amp;quot;]
author: &amp;quot;cheio&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
date: 2018-03-22
title: &amp;quot;example&amp;quot;
tags:
    - hello
    - goodbye
categories:
    - foo
comment: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;push-to-remote&#34;&gt;push to remote&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git add .
git commit -m &amp;quot;hello&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;add-submodule&#34;&gt;add submodule&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git submodule add -f -b master https://github.com/cheioKID/cheioKID.github.io.git public
git add .
git commit -m &amp;quot;Initial commit&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;if &lt;code&gt;&#39;public&#39; already exists and is not a valid git repo&lt;/code&gt; is arised, try &lt;code&gt;rm -rf public&lt;/code&gt; and &lt;code&gt;git rm -r --cached public/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;push-github-io&#34;&gt;push github.io&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;hugo --cleanDestinationDir
cd public
git add .
git commit -m &amp;quot;Build website&amp;quot;
git push origin master
cd ..
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Shortcodes Preview</title>
      <link>https://cheioKID.github.io/post/shortcodes-preview/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://cheioKID.github.io/post/shortcodes-preview/</guid>
      
        <description>&lt;h2 id=&#34;what-a-shortcode-is&#34;&gt;What a Shortcode is&lt;/h2&gt;

&lt;p&gt;Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &lt;code&gt;&amp;lt;iframes&amp;gt;&lt;/code&gt;) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.&lt;/p&gt;

&lt;p&gt;Hugo created &lt;strong&gt;shortcodes&lt;/strong&gt; to circumvent these limitations.&lt;/p&gt;

&lt;p&gt;A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template. Note that shortcodes will not work in template files. If you need the type of drop-in functionality that shortcodes provide but in a template, you most likely want a [partial template][partials] instead.&lt;/p&gt;

&lt;p&gt;In addition to cleaner Markdown, shortcodes can be updated any time to reflect new classes, techniques, or standards. At the point of site generation, Hugo shortcodes will easily merge in your changes. You avoid a possibly complicated search and replace operation.&lt;/p&gt;

&lt;p&gt;More details: &lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;https://gohugo.io/content-management/shortcodes/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;blockquotes&#34;&gt;blockquotes&lt;/h2&gt;

&lt;p&gt;Normal quote:











  





  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a simple quote.
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;&lt;/strong&gt;
    
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Quote with author:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a quote with only an Author named Author2.
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author2&lt;/strong&gt;
    
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Quote with author and source:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a quote from Author3 and source &#34;source.&#34;
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author3&lt;/strong&gt;
    
      &lt;cite&gt;Source&lt;/cite&gt;
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Quote with author and link:











  
  
  
  





      
      
      
    
     
      
    
    

    
    
  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a quote from Author4 and links to https://www.google.com.
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author4&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://www.google.com&#34; title=&#34;https://www.google.com&#34;&gt;google.com&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Quote with author, link and title:











  
  
  
  





  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a quote from Author5 and links to https://www.google.com with title &#34;Google.&#34;
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author5&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://www.google.com&#34; title=&#34;https://www.google.com&#34;&gt;Google&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Quote with author and a link longer than 32 characters, string is first cut at 32 characters then everything after the last forward slash is removed











  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
      
      
    
  


&lt;blockquote&gt;
  &lt;p&gt;
  This is a quote from Author5 and links to https://twitter.com/CryptoGangsta/status/716427930126196737 which is longer than 32 characters.
  &lt;br&gt;And this is a new line in the quote with the HTML br tag.
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;Author6&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://twitter.com/CryptoGangsta/status/716427930126196737&#34; title=&#34;https://twitter.com/CryptoGangsta/status/716427930126196737&#34;&gt;twitter.com/CryptoGangsta/...&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;Test from the Octopress blockquote page at: &lt;a href=&#34;http://octopress.org/docs/plugins/blockquote/&#34;&gt;http://octopress.org/docs/plugins/blockquote/&lt;/a&gt;











  
  
  
  





      
      
      
    
     
      
    
    

    
    
         
         
         

         
        
        
        
        
        
        
      
      
    
  


&lt;blockquote&gt;
  &lt;p&gt;
  Over the past 24 hours I&#39;ve been reflecting on my life &amp; I&#39;ve realized only one thing. I need a medieval battle axe.
&lt;/p&gt;
  &lt;footer&gt;
    &lt;strong&gt;@allanbranch&lt;/strong&gt;
    
      
        &lt;cite&gt;
          &lt;a href=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34; title=&#34;https://twitter.com/allanbranch/status/90766146063712256&#34;&gt;twitter.com/allanbranch/status/...&lt;/a&gt; 
        &lt;/cite&gt;
      
    
  &lt;/footer&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

&lt;h2 id=&#34;music&#34;&gt;music&lt;/h2&gt;

  &lt;iframe style=&#34;max-width: 100%&#34;
      class=&#34;music163&#34;
      frameborder=&#34;no&#34;
      border=&#34;0&#34;
      marginwidth=&#34;0&#34;
      marginheight=&#34;0&#34;
      width=&#34;330&#34;
      height=&#34;86&#34;
      src=&#34;//music.163.com/outchain/player?type=2&amp;id=3950552&amp;auto=0&amp;height=66&#34;&gt;
    &lt;/iframe&gt;

&lt;h2 id=&#34;gist&#34;&gt;gist&lt;/h2&gt;

&lt;p&gt;We can embed the gist in our content via username and gist ID pulled from the URL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist spf13 7896402 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Display:&lt;/p&gt;

&lt;script type=&#34;application/javascript&#34; src=&#34;//gist.github.com/spf13/7896402.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;youtube&#34;&gt;youtube&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;


&lt;h2 id=&#34;vimeo&#34;&gt;vimeo&lt;/h2&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//player.vimeo.com/video/146022717&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
 &lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Git note</title>
      <link>https://cheioKID.github.io/post/note/git-note/</link>
      <pubDate>Tue, 21 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/note/git-note/</guid>
      
        <description>

&lt;h1 id=&#34;git笔记&#34;&gt;git笔记&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;版本控制系统Git，代码托管采用Github仓库&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;初始化&#34;&gt;初始化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在目录下通过&lt;code&gt;git init&lt;/code&gt; 初始化空仓库Initialized empty Git repository&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;暂存区&#34;&gt;暂存区&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git add&lt;/code&gt;指令将修改添加到暂存区&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git status&lt;/code&gt;查看状态&lt;strong&gt;是否commit&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git rm &amp;lt;filename&amp;gt;&lt;/code&gt;删除版本库中的文件，实现和工作区的同步&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git commit&lt;/code&gt;提交修改，&lt;code&gt;git commit -m “commit name&amp;quot;&lt;/code&gt; 为本次commit命名&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add. # add changed files
git rm --cached &amp;lt;file&amp;gt; # delete from git
git checkout &amp;lt;file&amp;gt; # get back the file
git status
git commit -m &#39;Initial commit&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;版本&#34;&gt;版本&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git log&lt;/code&gt;查看版本控制记录，即&lt;strong&gt;commit历史记录&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;git log &amp;ndash;pretty=oneline breif info`&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;回退&#34;&gt;回退&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;回退到上一个版本，撤销最近一次commit &lt;code&gt;HEAD&lt;/code&gt;代表当前版本，&lt;code&gt;HEAD^&lt;/code&gt;代表当前版本的上一个版本，&lt;code&gt;HEAD^^&lt;/code&gt;代表当前版本的上一个版本的上一个版本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git reset —hard &amp;lt;commit-id&amp;gt;&lt;/code&gt;回退到指定id的版本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git checkout &amp;lt;filename&amp;gt;&lt;/code&gt;撤销工作区的修改&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;分支&#34;&gt;分支&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;&lt;/code&gt;创建并切换到该分支&lt;strong&gt;branch&lt;/strong&gt;，&lt;code&gt;git branch&lt;/code&gt;查看当前分支(带*)，分支之间的修改不互相影响，通过&lt;code&gt;git merge branch-name&lt;/code&gt;将某分支合并到当前分支&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;不同分支可以分别提交，但是无法直接合并，需要手动解决冲突每个组员可以在不同的分支上开发提交修改&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git stash&lt;/code&gt;保存现场，创建新的分支，修复bug，然后合并到&lt;strong&gt;master&lt;/strong&gt;分支，&lt;code&gt;git stash pop&lt;/code&gt;回到现场，继续工作&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通常增加新的功能，采取创建新的&lt;strong&gt;feature&lt;/strong&gt;分支，在合并之前可以通过&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;删除分支&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;远端仓库&#34;&gt;远端仓库&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git push &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&lt;/code&gt;推送分支到远程仓库&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;通过&lt;code&gt;git pull&lt;/code&gt;抓取最新的提交，和本地合并，解决冲突，然后&lt;strong&gt;push&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;放弃本地修改，采用远程仓库&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git fetch --all
git reset --hard origin/master
git fetch
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;切换到某分支，通过&lt;code&gt;git tag &amp;lt;name&amp;gt;&lt;/code&gt;，为分支最近一次的commit定义标签&lt;strong&gt;tag&lt;/strong&gt;，&lt;code&gt;git tag&lt;/code&gt;查看所有标签&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;命令&lt;code&gt;git push origin &amp;lt;tagname&amp;gt;&lt;/code&gt;可以推送一个本地标签；&lt;/p&gt;

&lt;p&gt;命令&lt;code&gt;git push origin --tags&lt;/code&gt;可以推送全部未推送过的本地标签；&lt;/p&gt;

&lt;p&gt;命令&lt;code&gt;git tag -d &amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个本地标签；&lt;/p&gt;

&lt;p&gt;命令&lt;code&gt;git push origin :refs/tags/&amp;lt;tagname&amp;gt;&lt;/code&gt;可以删除一个远程标签。&lt;/p&gt;

&lt;h4 id=&#34;初始提交到远端仓库&#34;&gt;初始提交到远端仓库&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#初始提交到远端仓库
git add .
git pull origin master --allow-unrelated-histories
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;git-help&#34;&gt;git &amp;ndash;help&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;usage: git [--version][--help] [-C &amp;lt;path&amp;gt;][-c name=value]
           [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager][--no-replace-objects] [--bare]
           [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]
           &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>LeetCode mySql</title>
      <link>https://cheioKID.github.io/post/cs/leetcode-sql/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/cs/leetcode-sql/</guid>
      
        <description>

&lt;h2 id=&#34;175&#34;&gt;175&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT FirstName, LAStName, City, State
FROM person 
LEFT JOIN address ON person.personID = address.personID;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;左外连接，除去address中person没有的元祖 ```&lt;/p&gt;

&lt;h2 id=&#34;176&#34;&gt;176&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT max(Salary) AS SecondHighestSalary
FROM Employee 
WHERE salary NOT IN (SELECT max(Salary) FROMEmployee);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;子查询得到最大值，外层查询的最大值满足小于子查询的最大值 ```&lt;/p&gt;

&lt;h2 id=&#34;177&#34;&gt;177&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE FUNCTION getNthHighestSalary(N INT)
RETURNS INT
BEGIN
	RETURN(SELECT DISTINCT c.salary
	FROM(SELECT a.salary AS salary, (SELECT 		COUNT(DISTINCT b.salary) FROM employee AS bWHERE b.salary &amp;gt;= a.salary) AS _row 
	FROM employee AS a) AS c
	WHEREc._row = n);
END 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和rank那题思路类似，如果表自身连接，有n条不重复的记录大于等于某个值，那么某个值就是第n高的记录，外层查询的范围是不相关子查询的结果，注意列的别名必须匹配外层查询的字段，而且子查询返回的表必须有别名才能在外层查询中查询，否则会报错&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;CREATE FUNCTION getNthHighestSalary(N INT)
RETURNS INT
BEGIN
	SET n = n-1;
	RETURN(SELECT DISTINCT Salary 
	FROM employee ORDER BY salary DESC limit n,1);
END
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;因为limit的第一个参数是某行相对第一行的偏移量，所以函数参数n要先减一，返回结果为salary从高到低排序，第n行记录，只取一行&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;178&#34;&gt;178&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT Score,(SELECT COUNT(DISTINCT score) 
	FROM scores WHEREscore &amp;gt;= a.score) AS Rank
FROM scores AS a
ORDER BY score DESC
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;外层查询遍历表scores的记录，每一次获得一条记录的score值x，传递到相关子查询，相关子查询遍历得到n条不重复的记录的score值小于等于x，那么该score值x的rank就为n，因此得到score值对应的rank，然后按score值降序&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;180&#34;&gt;180&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT DISTINCT a.num AS ConsecutiveNums
FROM logs AS a, logs AS b, logs AS c
WHERE a.id + 1 = b.id AND b.id + 1 = c.id 
AND a.num = b.num AND b.num = c.num
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;a表与b表连接，因为是连续重复的，所以id值的差都为1，重复三行只需要表连接两次。如果记录连续重复超过3行，结果会出现重复所以要加distinct&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;181&#34;&gt;181&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT a.name AS Employee
FROM Employee AS a, Employee AS b
WHERE a.ManagerId = b.Id AND a.Salary &amp;gt;b.salary;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;等值连接，表自身连接&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;182&#34;&gt;182&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT Email
FROM Person
GROUP BY Email
HAVING COUNT(Email) &amp;gt;= 2
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;查找重复的邮箱，只要count(邮箱)&amp;gt;=2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;183&#34;&gt;183&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT name AS Customers
FROM Customers
WHERE Customers.ID NOT IN
(SELECT CustomerId FROM Orders);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;CustomersId在Order中无记录就是没点餐&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;184&#34;&gt;184&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT Department.name AS Department, 
Employee.name AS Employee, Salary
FROM Department, Employee
WHERE Employee.DepartmentId = Department.Id
AND (DepartmentId, Salary) IN
	(SELECTDepartmentId, MAX(Salary) FROM Employee GROUP BY DepartmentId);
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;子查询获得以部门号分组的salary最大值和对应的部门号，外层查询满足WHERE中条件的结果应在子查询结果集中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;185&#34;&gt;185&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT b.name AS Department, a.name ASEmployee, Salary
FROM employee AS a, department AS b
WHERE a.departmentId = b.id
AND (SELECT COUNT(DISTINCT salary) FROM employee WHERE departmentid = a.departmentid AND salary &amp;gt; a.salary) &amp;lt; 3
ORDER BY a.departmentID ASC, a.salary DESC
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;两表等值连接，相关子查询得到大于某个salary值的count不超过三，就可以得到前3高的salary，最后按departmentID升序(默认升序)，按salary降序&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;196&#34;&gt;196&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;DELETE b FROM person AS a, person AS b
WHERE a.email = b.email AND a.id &amp;lt; b.id
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;person表中email值相同的元组自身连接，如果连接后的记录存在email相同但是id不同，则删除id值更大的那一条记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;197&#34;&gt;197&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT b.Id FROM weather AS a, weather AS b
WHERE TO_DAYS(a.date) - TO_DAYS(b.date) =-1 
AND a.temperature &amp;lt; b.temperature
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;weather表自身连接，TO_DAYS函数将date类型转换成一个int类型的数，得出日期之间的偏移量，如果a中某记录比b的日期早一天，且a中记录的temperature小于b中temperature，则b中记录在结果集中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;262&#34;&gt;262&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-SQL&#34;&gt;SELECT request_at AS Day, 
ROUND(SUM(CASE WHEN status LIKE&#39;cancelled_%&#39; THEN 1 ELSE 0 END)/COUNT(status),2) AS &#39;Cancellation Rate&#39;
FROM trips, users
WHERE client_id = users_id AND banned =&#39;no&#39; AND request_at BETWEEN &#39;2013-10-01&#39; AND &#39;2013-10-03&#39;
GROUP BY request_at 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;先两表等值连接，满足条件的记录中分组计算取消比率，可以用sum函数（或者也可以用count(if())但是没试过），得出cancalled的记录数量，除以status的总数就是取消比率&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://cheioKID.github.io/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/creating-a-new-theme/</guid>
      
        <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start with creating a new site with a very basic template. Then we&amp;rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.&lt;/p&gt;

&lt;p&gt;In this tutorial, commands that you enter will start with the &amp;ldquo;$&amp;rdquo; prompt. The output will follow. Lines that start with &amp;ldquo;#&amp;rdquo; are comments that I&amp;rsquo;ve added to explain a point. When I show updates to a file, the &amp;ldquo;:wq&amp;rdquo; on the last line means to save the file.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## this is a comment
$ echo this is a command
this is a command

## edit the file
$vi foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &amp;quot;2014-09-28&amp;quot;
title = &amp;quot;creating a new theme&amp;quot;
+++

bah and humbug
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;some-definitions&#34;&gt;Some Definitions&lt;/h2&gt;

&lt;p&gt;There are a few concepts that you need to understand before creating a theme.&lt;/p&gt;

&lt;h3 id=&#34;skins&#34;&gt;Skins&lt;/h3&gt;

&lt;p&gt;Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.&lt;/p&gt;

&lt;p&gt;You have two ways to create a skin. The simplest way is to create it in the &lt;code&gt;layouts/&lt;/code&gt; directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the &lt;code&gt;layouts/&lt;/code&gt; directory so it will always find the skin.&lt;/p&gt;

&lt;p&gt;Your second choice is to create it in a sub-directory of the &lt;code&gt;themes/&lt;/code&gt; directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?&lt;/p&gt;

&lt;p&gt;The difference between creating a skin in &lt;code&gt;layouts/&lt;/code&gt; and creating it in &lt;code&gt;themes/&lt;/code&gt; is very subtle. A skin in &lt;code&gt;layouts/&lt;/code&gt; can’t be customized without updating the templates and static files that it is built from. A skin created in &lt;code&gt;themes/&lt;/code&gt;, on the other hand, can be and that makes it easier for other people to use it.&lt;/p&gt;

&lt;p&gt;The rest of this tutorial will call a skin created in the &lt;code&gt;themes/&lt;/code&gt; directory a theme.&lt;/p&gt;

&lt;p&gt;Note that you can use this tutorial to create a skin in the &lt;code&gt;layouts/&lt;/code&gt; directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.&lt;/p&gt;

&lt;h3 id=&#34;the-home-page&#34;&gt;The Home Page&lt;/h3&gt;

&lt;p&gt;The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.&lt;/p&gt;

&lt;h3 id=&#34;site-configuration-file&#34;&gt;Site Configuration File&lt;/h3&gt;

&lt;p&gt;When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.&lt;/p&gt;

&lt;p&gt;Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your &lt;code&gt;content/&lt;/code&gt; directory and template files in your &lt;code&gt;themes/&lt;/code&gt; directory. It will create HTML files in your &lt;code&gt;public/&lt;/code&gt; directory. You can change this by specifying alternate locations in the configuration file.&lt;/p&gt;

&lt;h3 id=&#34;content&#34;&gt;Content&lt;/h3&gt;

&lt;p&gt;Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.&lt;/p&gt;

&lt;h4 id=&#34;front-matter&#34;&gt;Front Matter&lt;/h4&gt;

&lt;p&gt;The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “&lt;code&gt;+++&lt;/code&gt;”, YAML by “&lt;code&gt;---&lt;/code&gt;”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.&lt;/p&gt;

&lt;p&gt;The information in the front matter is passed into the template before the content is rendered into HTML.&lt;/p&gt;

&lt;h4 id=&#34;markdown&#34;&gt;Markdown&lt;/h4&gt;

&lt;p&gt;Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.&lt;/p&gt;

&lt;h3 id=&#34;template-files&#34;&gt;Template Files&lt;/h3&gt;

&lt;p&gt;Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&amp;rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.&lt;/p&gt;

&lt;p&gt;There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.&lt;/p&gt;

&lt;p&gt;Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.&lt;/p&gt;

&lt;p&gt;Please note that you can use the front matter to influence Hugo’s choice of templates.&lt;/p&gt;

&lt;h4 id=&#34;single-template&#34;&gt;Single Template&lt;/h4&gt;

&lt;p&gt;A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.&lt;/p&gt;

&lt;h4 id=&#34;list-template&#34;&gt;List Template&lt;/h4&gt;

&lt;p&gt;A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.&lt;/p&gt;

&lt;p&gt;The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.&lt;/p&gt;

&lt;h4 id=&#34;partial-template&#34;&gt;Partial Template&lt;/h4&gt;

&lt;p&gt;A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-site&#34;&gt;Create a New Site&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s use Hugo to create a new web site. I&amp;rsquo;m a Mac user, so I&amp;rsquo;ll create mine in my home directory, in the Sites folder. If you&amp;rsquo;re using Linux, you might have to create the folder first.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;new site&amp;rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take a look in the content/ directory to confirm that it is empty.&lt;/p&gt;

&lt;p&gt;The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&amp;rsquo;s a topic for a different tutorial, so please ignore them for now.&lt;/p&gt;

&lt;h3 id=&#34;generate-the-html-for-the-new-site&#34;&gt;Generate the HTML For the New Site&lt;/h3&gt;

&lt;p&gt;Running the &lt;code&gt;hugo&lt;/code&gt; command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&amp;rsquo;s everything that&amp;rsquo;s not content). Since we have an empty site, it won&amp;rsquo;t do much, but it will do it very quickly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &amp;ldquo;&lt;code&gt;--verbose&lt;/code&gt;&amp;rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &amp;ldquo;INFO:&amp;rdquo; or &amp;ldquo;WARN:&amp;rdquo; is present because we used that flag. The lines that start with &amp;ldquo;WARN:&amp;rdquo; are warning messages. We&amp;rsquo;ll go over them later.&lt;/p&gt;

&lt;p&gt;We can verify that the command worked by looking at the directory again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See that new public/ directory? Hugo placed all generated content there. When you&amp;rsquo;re ready to publish your web site, that&amp;rsquo;s the place to start. For now, though, let&amp;rsquo;s just confirm that we have what we&amp;rsquo;d expect from a site with no content.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo created two XML files, which is standard, but there are no HTML files.&lt;/p&gt;

&lt;h3 id=&#34;test-the-new-site&#34;&gt;Test the New Site&lt;/h3&gt;

&lt;p&gt;Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &amp;ldquo;server&amp;rdquo; command. If it is successful, you will see output similar to the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect to the listed URL (it&amp;rsquo;s on the line that starts with &amp;ldquo;Web Server&amp;rdquo;). If everything is working correctly, you should get a page that shows the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;index.xml
sitemap.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s a listing of your public/ directory. Hugo didn&amp;rsquo;t create a home page because our site has no content. When there&amp;rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.&lt;/p&gt;

&lt;p&gt;Let’s go back and look at those warnings again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.&lt;/p&gt;

&lt;p&gt;Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.&lt;/p&gt;

&lt;p&gt;I like that the verbose flag causes Hugo to list the files that it&amp;rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&amp;rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&amp;rsquo;t find a template for the home page and it told you so.&lt;/p&gt;

&lt;p&gt;At this point, you&amp;rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.&lt;/p&gt;

&lt;h2 id=&#34;create-a-new-theme&#34;&gt;Create a New Theme&lt;/h2&gt;

&lt;p&gt;Hugo doesn&amp;rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to create a new theme called &amp;ldquo;zafta.&amp;rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.&lt;/p&gt;

&lt;p&gt;All themes have opinions on content and layout. For example, Zafta uses &amp;ldquo;post&amp;rdquo; over &amp;ldquo;blog&amp;rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.&lt;/p&gt;

&lt;h3 id=&#34;create-a-skeleton&#34;&gt;Create a Skeleton&lt;/h3&gt;

&lt;p&gt;Use the hugo &amp;ldquo;new&amp;rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.&lt;/p&gt;

&lt;p&gt;Please take a minute to fill out the theme.toml and LICENSE.md files. They&amp;rsquo;re optional, but if you&amp;rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&amp;rsquo;s also nice to declare the license so that people will know how they can use the theme.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/theme.toml
author = &amp;quot;michael d henderson&amp;quot;
description = &amp;quot;a minimal working template&amp;quot;
license = &amp;quot;MIT&amp;quot;
name = &amp;quot;zafta&amp;quot;
source_repo = &amp;quot;&amp;quot;
tags = [&amp;quot;tags&amp;quot;, &amp;quot;categories&amp;quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &amp;quot;YOUR_NAME_HERE&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the the skeleton&amp;rsquo;s template files are empty. Don&amp;rsquo;t worry, we&amp;rsquo;ll be changing that shortly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-the-configuration-file-to-use-the-theme&#34;&gt;Update the Configuration File to Use the Theme&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got a theme to work with, it&amp;rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &amp;ldquo;-t zafta&amp;rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&amp;rsquo;t put it in the configuration file or specify it on the command line, you won&amp;rsquo;t use the template that you&amp;rsquo;re expecting to.&lt;/p&gt;

&lt;p&gt;Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi config.toml
theme = &amp;quot;zafta&amp;quot;
baseurl = &amp;quot;&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;
title = &amp;quot;zafta - totally refreshing&amp;quot;
MetaDataFormat = &amp;quot;toml&amp;quot;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;generate-the-site&#34;&gt;Generate the Site&lt;/h3&gt;

&lt;p&gt;Now that we have an empty theme, let&amp;rsquo;s generate the site again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&amp;rsquo;s directory.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check the public/ directory to see what Hugo&amp;rsquo;s created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice four things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hugo created a home page. This is the file public/index.html.&lt;/li&gt;
&lt;li&gt;Hugo created a css/ directory.&lt;/li&gt;
&lt;li&gt;Hugo created a js/ directory.&lt;/li&gt;
&lt;li&gt;Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&amp;rsquo;t create any pages. That&amp;rsquo;s because it considers a &amp;ldquo;page&amp;rdquo; to be a file created directly from a content file. It doesn&amp;rsquo;t count things like the index.html files that it creates automatically.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;the-home-page-1&#34;&gt;The Home Page&lt;/h4&gt;

&lt;p&gt;Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&amp;rsquo;s warning message shows that it looks for three different templates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If it can&amp;rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.&lt;/p&gt;

&lt;p&gt;When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;the-magic-of-static&#34;&gt;The Magic of Static&lt;/h4&gt;

&lt;p&gt;Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.&lt;/p&gt;

&lt;p&gt;Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&amp;rsquo;s opinion is that you&amp;rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&amp;rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&amp;rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-theme-development-cycle&#34;&gt;The Theme Development Cycle&lt;/h2&gt;

&lt;p&gt;When you&amp;rsquo;re working on a theme, you will make changes in the theme&amp;rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Purge the public/ directory.&lt;/li&gt;
&lt;li&gt;Run the built in web server in watch mode.&lt;/li&gt;
&lt;li&gt;Open your site in a browser.&lt;/li&gt;
&lt;li&gt;Update the theme.&lt;/li&gt;
&lt;li&gt;Glance at your browser window to see changes.&lt;/li&gt;
&lt;li&gt;Return to step 4.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.&lt;/p&gt;

&lt;p&gt;Check the main Hugo site for information on using Git with Hugo.&lt;/p&gt;

&lt;h3 id=&#34;purge-the-public-directory&#34;&gt;Purge the public/ Directory&lt;/h3&gt;

&lt;p&gt;When generating the site, Hugo will create new files and update existing ones in the &lt;code&gt;public/&lt;/code&gt; directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.&lt;/p&gt;

&lt;p&gt;Note: If you&amp;rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.&lt;/p&gt;

&lt;h3 id=&#34;hugo-s-watch-option&#34;&gt;Hugo&amp;rsquo;s Watch Option&lt;/h3&gt;

&lt;p&gt;Hugo&amp;rsquo;s &amp;ldquo;&lt;code&gt;--watch&lt;/code&gt;&amp;rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.&lt;/p&gt;

&lt;h3 id=&#34;live-reload&#34;&gt;Live Reload&lt;/h3&gt;

&lt;p&gt;Hugo&amp;rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &amp;ldquo;Wow, that&amp;rsquo;s totally amazing.&amp;rdquo;&lt;/p&gt;

&lt;h3 id=&#34;development-commands&#34;&gt;Development Commands&lt;/h3&gt;

&lt;p&gt;Use the following commands as the basis for your workflow.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here&amp;rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&amp;rsquo;ve said this before, it&amp;rsquo;s amazing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&amp;quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&amp;quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;update-the-home-page-template&#34;&gt;Update the Home Page Template&lt;/h2&gt;

&lt;p&gt;The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&amp;rsquo;s layout/ directory:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;_default/list.html&lt;/li&gt;
&lt;li&gt;_default/single.html&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could update one of the default templates, but a good design decision is to update the most specific template available. That&amp;rsquo;s not a hard and fast rule (in fact, we&amp;rsquo;ll break it a few times in this tutorial), but it is a good generalization.&lt;/p&gt;

&lt;h3 id=&#34;make-a-static-home-page&#34;&gt;Make a Static Home Page&lt;/h3&gt;

&lt;p&gt;Right now, that page is empty because we don&amp;rsquo;t have any content and we don&amp;rsquo;t have any logic in the template. Let&amp;rsquo;s change that by adding some text to the template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;live-reload-1&#34;&gt;Live Reload&lt;/h4&gt;

&lt;p&gt;Note: If you&amp;rsquo;re running the server with the &lt;code&gt;--watch&lt;/code&gt; option, you&amp;rsquo;ll see different content in the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;hugo says hello!&amp;lt;/p&amp;gt;
&amp;lt;script&amp;gt;document.write(&#39;&amp;lt;script src=&amp;quot;http://&#39;
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0]
    + &#39;:1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/&#39;
        + &#39;script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you use &lt;code&gt;--watch&lt;/code&gt;, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.&lt;/p&gt;

&lt;h3 id=&#34;build-a-dynamic-home-page&#34;&gt;Build a &amp;ldquo;Dynamic&amp;rdquo; Home Page&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Dynamic home page?&amp;rdquo; Hugo&amp;rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&amp;rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&amp;rsquo;ll use iteration in the template to do that.&lt;/p&gt;

&lt;h4 id=&#34;create-new-posts&#34;&gt;Create New Posts&lt;/h4&gt;

&lt;p&gt;Now that we have the home page generating static content, let&amp;rsquo;s add some content to the site. We&amp;rsquo;ll display these posts as a list on the home page and on their own page, too.&lt;/p&gt;

&lt;p&gt;Hugo has a command to generate a skeleton post, just like it does for sites and themes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &amp;lt;nil&amp;gt; to map[string]interface{}

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That wasn&amp;rsquo;t very nice, was it?&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;new&amp;rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&amp;rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/archetypes/post.md
+++
Description = &amp;quot;&amp;quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:54:53-05:00&amp;quot;
title = &amp;quot;first&amp;quot;

+++
my first post

$ cat content/post/second.md
+++
Categories = []
Description = &amp;quot;&amp;quot;
Tags = []
date = &amp;quot;2014-09-29T21:57:09-05:00&amp;quot;
title = &amp;quot;second&amp;quot;

+++
my second post

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;, &amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output says that it created 2 pages. Those are our new posts:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The new files are empty because because the templates used to generate the content are empty. The homepage doesn&amp;rsquo;t show the new content, either. We have to update the templates to add the posts.&lt;/p&gt;

&lt;h3 id=&#34;list-and-single-templates&#34;&gt;List and Single Templates&lt;/h3&gt;

&lt;p&gt;In Hugo, we have three major kinds of templates. There&amp;rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &amp;ldquo;single&amp;rdquo; templates which are used to generate output for a single content file. We also have &amp;ldquo;list&amp;rdquo; templates that are used to group multiple pieces of content before generating output.&lt;/p&gt;

&lt;p&gt;Generally speaking, list templates are named &amp;ldquo;list.html&amp;rdquo; and single templates are named &amp;ldquo;single.html.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.&lt;/p&gt;

&lt;h3 id=&#34;add-content-to-the-homepage&#34;&gt;Add Content to the Homepage&lt;/h3&gt;

&lt;p&gt;The home page will contain a list of posts. Let&amp;rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &amp;ldquo;{{&amp;rdquo; and &amp;ldquo;}}&amp;rdquo;. In our template, the commands are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;.Title&lt;/li&gt;
&lt;li&gt;end&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &amp;ldquo;range&amp;rdquo; command is an iterator. We&amp;rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;.Title&amp;rdquo; command prints the value of the &amp;ldquo;title&amp;rdquo; variable. Hugo pulls it from the front matter in the Markdown file.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;end&amp;rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &amp;ldquo;end.&amp;rdquo; Everything between the &amp;ldquo;range&amp;rdquo; and &amp;ldquo;end&amp;rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.&lt;/p&gt;

&lt;p&gt;Build the web site and then verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;

    &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&amp;rsquo;s take a moment to appreciate what we&amp;rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&amp;rsquo;ve learned everything you need to know to build a theme. All that&amp;rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.&lt;/p&gt;

&lt;p&gt;And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&amp;rsquo;t worry, though, that&amp;rsquo;s all to come.&lt;/p&gt;

&lt;h3 id=&#34;add-content-to-the-posts&#34;&gt;Add Content to the Posts&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &amp;ldquo;post&amp;rdquo; (and if we don&amp;rsquo;t do something weird, their type is also &amp;ldquo;post&amp;rdquo;).&lt;/p&gt;

&lt;p&gt;Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&amp;rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&amp;rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.&lt;/p&gt;

&lt;p&gt;Now that we know the search rule, let&amp;rsquo;s see what we actually have available:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We could create a new template, post/single.html, or change the default. Since we don&amp;rsquo;t know of any other content types, let&amp;rsquo;s start with updating the default.&lt;/p&gt;

&lt;p&gt;Remember, any content that we haven&amp;rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&amp;rsquo;re going to be adding different types of content and we&amp;rsquo;re going to end up undoing some of the changes we&amp;rsquo;ve made. It&amp;rsquo;s good because we&amp;rsquo;ll be able to see immediate results. It&amp;rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&amp;rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&amp;rsquo;ll accept the cost and proceed.&lt;/p&gt;

&lt;p&gt;Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&amp;rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&amp;rsquo;s a refreshing amount of joy right there.&lt;/p&gt;

&lt;h4 id=&#34;update-the-template-file&#34;&gt;Update the Template File&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq

$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;first&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;first&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;my first post&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$ cat public/post/second/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;second&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;second&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;my second post&amp;lt;/p&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the posts now have content. You can go to localhost:1313/post/first to verify.&lt;/p&gt;

&lt;h3 id=&#34;linking-to-content&#34;&gt;Linking to Content&lt;/h3&gt;

&lt;p&gt;The posts are on the home page. Let&amp;rsquo;s add a link from there to the post. Since this is the home page, we&amp;rsquo;ll update its template.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  {{ range first 10 .Data.Pages }}
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&amp;quot;tag&amp;quot;:&amp;quot;tags&amp;quot;, &amp;quot;category&amp;quot;:&amp;quot;categories&amp;quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name &#39;*.html&#39; | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/second/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;

    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;/post/first/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;create-a-post-listing&#34;&gt;Create a Post Listing&lt;/h3&gt;

&lt;p&gt;We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&amp;rsquo;s make it show a list of all posts (not just the first ten).&lt;/p&gt;

&lt;p&gt;We need to decide which template to update. This will be a listing, so it should be a list template. Let&amp;rsquo;s take a quick look and see which list templates are available.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&amp;rsquo;t have multiple content types, so let&amp;rsquo;s stay consistent and update the default list template.&lt;/p&gt;

&lt;h2 id=&#34;creating-top-level-pages&#34;&gt;Creating Top Level Pages&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s add an &amp;ldquo;about&amp;rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).&lt;/p&gt;

&lt;p&gt;The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&amp;rsquo;s verify that by creating an &amp;ldquo;about&amp;rdquo; page at the top level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi content/about.md
+++
title = &amp;quot;about&amp;quot;
description = &amp;quot;about this site&amp;quot;
date = &amp;quot;2014-09-27&amp;quot;
slug = &amp;quot;about time&amp;quot;
+++

## about us

i&#39;m speechless
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the page wasn&amp;rsquo;t created at the top level. It was created in a sub-directory named &amp;lsquo;about-time/&amp;rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It&amp;rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.&lt;/p&gt;

&lt;p&gt;One other thing. Take a look at the home page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat public/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/theme/&amp;quot;&amp;gt;creating a new theme&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/about-time/&amp;quot;&amp;gt;about&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/second-post/&amp;quot;&amp;gt;second&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;h1&amp;gt;&amp;lt;a href=&amp;quot;http://localhost:1313/post/first-post/&amp;quot;&amp;gt;first&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;
&amp;lt;script&amp;gt;document.write(&#39;&amp;lt;script src=&amp;quot;http://&#39;
        + (location.host || &#39;localhost&#39;).split(&#39;:&#39;)[0]
		+ &#39;:1313/livereload.js?mindelay=10&amp;quot;&amp;gt;&amp;lt;/&#39;
        + &#39;script&amp;gt;&#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that the &amp;ldquo;about&amp;rdquo; link is listed with the posts? That&amp;rsquo;s not desirable, so let&amp;rsquo;s change that first.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;post&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &amp;quot;page&amp;quot; }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.&lt;/p&gt;

&lt;p&gt;But, that about page still renders to about-time/index.html.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ find public -name &#39;*.html&#39; | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&amp;rsquo;s do it the hard way and change the permalink in the configuration file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi config.toml
[permalinks]
	page = &amp;quot;/:title/&amp;quot;
	about = &amp;quot;/:filename/&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify that this didn&amp;rsquo;t work. Hugo lets &amp;ldquo;slug&amp;rdquo; or &amp;ldquo;URL&amp;rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.&lt;/p&gt;

&lt;h2 id=&#34;sharing-templates&#34;&gt;Sharing Templates&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&amp;rsquo;t. That&amp;rsquo;s because we didn&amp;rsquo;t put the title in the home page&amp;rsquo;s template (layouts/index.html). That&amp;rsquo;s an easy thing to do, but let&amp;rsquo;s look at a different option.&lt;/p&gt;

&lt;p&gt;We can put the common bits into a shared template that&amp;rsquo;s stored in the themes/zafta/layouts/partials/ directory.&lt;/p&gt;

&lt;h3 id=&#34;create-the-header-and-footer-partials&#34;&gt;Create the Header and Footer Partials&lt;/h3&gt;

&lt;p&gt;In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&amp;rsquo;s presentation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/partials/header.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;update-the-home-page-template-to-use-the-partials&#34;&gt;Update the Home Page Template to Use the Partials&lt;/h3&gt;

&lt;p&gt;The most noticeable difference between a template call and a partials call is the lack of path:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;theme/partials/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;versus&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Both pass in the context.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s change the home page template to use these new partials.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/index.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;posts&amp;lt;/h1&amp;gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &amp;quot;post&amp;quot;}}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

  &amp;lt;h1&amp;gt;pages&amp;lt;/h1&amp;gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &amp;quot;page&amp;quot;) (eq .Type &amp;quot;about&amp;quot;) }}
      &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
    {{ end }}
  {{ end }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results. The title on the home page is now &amp;ldquo;your title here&amp;rdquo;, which comes from the &amp;ldquo;title&amp;rdquo; variable in the config.toml file.&lt;/p&gt;

&lt;h3 id=&#34;update-the-default-single-template-to-use-the-partials&#34;&gt;Update the Default Single Template to Use the Partials&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.&lt;/p&gt;

&lt;h2 id=&#34;add-date-published-to-posts&#34;&gt;Add “Date Published” to Posts&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s common to have posts display the date that they were written or published, so let&amp;rsquo;s add that. The front matter of our posts has a variable named &amp;ldquo;date.&amp;rdquo; It&amp;rsquo;s usually the date the content was created, but let&amp;rsquo;s pretend that&amp;rsquo;s the value we want to display.&lt;/p&gt;

&lt;h3 id=&#34;add-date-published-to-the-template&#34;&gt;Add “Date Published” to the Template&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;ll start by updating the template used to render the posts. The template code will look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Posts use the default single template, so we&amp;rsquo;ll change that file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generate the web site and verify the results. The posts now have the date displayed in them. There&amp;rsquo;s a problem, though. The &amp;ldquo;about&amp;rdquo; page also has the date displayed.&lt;/p&gt;

&lt;p&gt;As usual, there are a couple of ways to make the date display only on posts. We could do an &amp;ldquo;if&amp;rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.&lt;/p&gt;

&lt;p&gt;The &amp;ldquo;if&amp;rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &amp;ldquo;code for today,&amp;rdquo; too.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume, though, that we&amp;rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&amp;rsquo;re going to create a section template.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s restore the default single template before we forget.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll update the post&amp;rsquo;s version of the single template. If you remember Hugo&amp;rsquo;s rules, the template engine will use this version over the default.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vi themes/zafta/layouts/post/single.html
{{ partial &amp;quot;header.html&amp;quot; . }}

  &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/h2&amp;gt;
  {{ .Content }}

{{ partial &amp;quot;footer.html&amp;quot; . }}
:wq

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&amp;rsquo;t.&lt;/p&gt;

&lt;h3 id=&#34;don-t-repeat-yourself&#34;&gt;Don&amp;rsquo;t Repeat Yourself&lt;/h3&gt;

&lt;p&gt;DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&amp;rsquo;re figuring that out, accept that you&amp;rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&amp;rsquo;s okay to delay splitting up a template.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://cheioKID.github.io/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/goisforlovers/</guid>
      
        <description>

&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;This document is a brief primer on using go templates. The &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;
provide more details.&lt;/p&gt;

&lt;h2 id=&#34;introduction-to-go-templates&#34;&gt;Introduction to Go Templates&lt;/h2&gt;

&lt;p&gt;Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that go templates parse very quickly.&lt;/p&gt;

&lt;p&gt;A unique characteristic of go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;go docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h2&gt;

&lt;p&gt;Go lang templates are html files with the addition of variables and
functions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Go variables and functions are accessible within {{ }}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing a predefined variable &amp;ldquo;foo&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ foo }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parameters are separated using spaces&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Calling the add function with input of 1, 2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Methods and fields are accessed via dot notation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing the Page Parameter &amp;ldquo;bar&amp;rdquo;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Params.bar }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Parentheses can be used to group items together&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (isset .Params &amp;quot;alt&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;) }} Caption {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Each go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
&lt;a href=&#34;https://cheioKID.github.io/layout/variables&#34;&gt;variables&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;A variable is accessed by referencing the variable name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;{{ .Title }}&amp;lt;/title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables can also be defined and referenced.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ $address := &amp;quot;123 Main St.&amp;quot;}}
{{ $address }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;

&lt;p&gt;Go template ship with a few functions which provide basic functionality. The go
template system also provides a mechanism for applications to extend the
available functions with their own. &lt;a href=&#34;https://cheioKID.github.io/layout/functions&#34;&gt;Hugo template
functions&lt;/a&gt; provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ add 1 2 }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;includes&#34;&gt;Includes&lt;/h2&gt;

&lt;p&gt;When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ template &amp;quot;chrome/header.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;logic&#34;&gt;Logic&lt;/h2&gt;

&lt;p&gt;Go templates provide the most basic iteration and conditional logic.&lt;/p&gt;

&lt;h3 id=&#34;iteration&#34;&gt;Iteration&lt;/h3&gt;

&lt;p&gt;Just like in go, the go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1: Using Context&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range array }}
    {{ . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $element := array}}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: Declaring key and value variable name&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;conditionals&#34;&gt;Conditionals&lt;/h3&gt;

&lt;p&gt;If, else, with, or, &amp;amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Go Templates treat the following values as false:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;any array, slice, map, or string of length zero&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example 1: If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;title&amp;quot; }}&amp;lt;h4&amp;gt;{{ index .Params &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 2: If -&amp;gt; Else&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{else}}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 3: And &amp;amp; Or&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if and (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 4: With&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An alternative way of writing &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent.&lt;/p&gt;

&lt;p&gt;The first example above could be simplified as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ with .Params.title }}&amp;lt;h4&amp;gt;{{ . }}&amp;lt;/h4&amp;gt;{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Example 5: If -&amp;gt; Else If&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if isset .Params &amp;quot;alt&amp;quot; }}
    {{ index .Params &amp;quot;alt&amp;quot; }}
{{ else if isset .Params &amp;quot;caption&amp;quot; }}
    {{ index .Params &amp;quot;caption&amp;quot; }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pipes&#34;&gt;Pipes&lt;/h2&gt;

&lt;p&gt;One of the most powerful components of go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&amp;rsquo;s output becomes the
input of the following pipe.&lt;/p&gt;

&lt;p&gt;Because of the very simple syntax of go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.&lt;/p&gt;

&lt;p&gt;A few simple examples should help convey how to use the pipe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if eq 1 1 }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is the same as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ eq 1 1 | if }} Same {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ index .Params &amp;quot;disqus_url&amp;quot; | html }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access the page parameter called &amp;ldquo;disqus_url&amp;rdquo; and escape the HTML.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ if or (or (isset .Params &amp;quot;title&amp;quot;) (isset .Params &amp;quot;caption&amp;quot;)) (isset .Params &amp;quot;attr&amp;quot;)}}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could be rewritten as&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{  isset .Params &amp;quot;caption&amp;quot; | or isset .Params &amp;quot;title&amp;quot; | or isset .Params &amp;quot;attr&amp;quot; | if }}
Stuff Here
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;context-aka-the-dot&#34;&gt;Context (aka. the dot)&lt;/h2&gt;

&lt;p&gt;The most easily overlooked concept to understand about go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &amp;lt;li&amp;gt; &amp;lt;a href=&amp;quot;{{ $baseurl }}/tags/{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt; - {{ $title }} &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.&lt;/p&gt;

&lt;h1 id=&#34;hugo-parameters&#34;&gt;Hugo Parameters&lt;/h1&gt;

&lt;p&gt;Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.&lt;/p&gt;

&lt;h2 id=&#34;using-content-page-parameters&#34;&gt;Using Content (page) Parameters&lt;/h2&gt;

&lt;p&gt;In each piece of content you can provide variables to be used by the
templates. This happens in the &lt;a href=&#34;https://cheioKID.github.io/content/front-matter&#34;&gt;front matter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&amp;rsquo;t make a lot of sense. We&amp;rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.&lt;/p&gt;

&lt;p&gt;Here is the example front matter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Permalinks&amp;quot;
date: &amp;quot;2013-11-18&amp;quot;
aliases:
  - &amp;quot;/doc/permalinks/&amp;quot;
groups: [&amp;quot;extras&amp;quot;]
groups_weight: 30
notoc: true
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the corresponding code inside of the template:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  {{ if not .Params.notoc }}
    &amp;lt;div id=&amp;quot;toc&amp;quot; class=&amp;quot;well col-md-4 col-sm-6&amp;quot;&amp;gt;
    {{ .TableOfContents }}
    &amp;lt;/div&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;using-site-config-parameters&#34;&gt;Using Site (config) Parameters&lt;/h2&gt;

&lt;p&gt;In your top-level configuration file (eg, &lt;code&gt;config.yaml&lt;/code&gt;) you can define site
parameters, which are values which will be available to you in chrome.&lt;/p&gt;

&lt;p&gt;For instance, you might declare:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
  CopyrightHTML: &amp;quot;Copyright &amp;amp;#xA9; 2013 John Doe. All Rights Reserved.&amp;quot;
  TwitterUser: &amp;quot;spf13&amp;quot;
  SidebarRecentLimit: 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Within a footer layout, you might then declare a &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; which is only
provided if the &lt;code&gt;CopyrightHTML&lt;/code&gt; parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{if .Site.Params.CopyrightHTML}}&amp;lt;footer&amp;gt;
&amp;lt;div class=&amp;quot;text-center&amp;quot;&amp;gt;{{.Site.Params.CopyrightHTML | safeHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An alternative way of writing the &amp;ldquo;if&amp;rdquo; and then referencing the same value
is to use &amp;ldquo;with&amp;rdquo; instead. With rebinds the context &lt;code&gt;.&lt;/code&gt; within its scope,
and skips the block if the variable is absent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{with .Site.Params.TwitterUser}}&amp;lt;span class=&amp;quot;twitter&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;https://twitter.com/{{.}}&amp;quot; rel=&amp;quot;author&amp;quot;&amp;gt;
&amp;lt;img src=&amp;quot;/images/twitter.png&amp;quot; width=&amp;quot;48&amp;quot; height=&amp;quot;48&amp;quot; title=&amp;quot;Twitter: {{.}}&amp;quot;
 alt=&amp;quot;Twitter&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;
&amp;lt;/span&amp;gt;{{end}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, if you want to pull &amp;ldquo;magic constants&amp;rdquo; out of your layouts, you can do
so, such as in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;recent&amp;quot;&amp;gt;
  &amp;lt;h1&amp;gt;Recent Posts&amp;lt;/h1&amp;gt;
  &amp;lt;ul&amp;gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{.RelPermalink}}&amp;quot;&amp;gt;{{.Title}}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  {{end}}&amp;lt;/ul&amp;gt;
&amp;lt;/nav&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://cheioKID.github.io/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/migrate-from-jekyll/</guid>
      
        <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;https://cheioKID.github.io/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;https://cheioKID.github.io/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;https://cheioKID.github.io/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module Jekyll
  class ImageTag &amp;lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
      else
        source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
      end
      if @link
        source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
      if @link
        source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
      end
      source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
      source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
      source
    end
  end
end
Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://cheioKID.github.io/post/data-mining/dbscan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/data-mining/dbscan/</guid>
      
        <description>

&lt;p&gt;##A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Clustering algorithms are attractive for the task of class identification in spatial databases. However, the application to large spatial databases rises the following requirements for clustering algorithms: minimal requirements of domain knowledge to determine the input parameters, discovery of clusters with arbitrary shape and good efficiency on large databases. The well-known clustering algorithms offer no solution to the combination of these requirements. In this paper, we present the new clustcring algorithm DBSCAN relying on a density-based notion of clusters which is designed to discover clusters of arbitrary shape. DBSCAN requires only one input parameter and supports the user in determining an appropriate value for it. We performed an experimental evaluation of the effectiveness and efficiency of DBSCAN using synthetic data and real data of the SEQUOIA 2000 benchmark. The results of our experiments demonstrate that(l) DBSCAN is significantly more effective in discovering clusters of arbitrary shape than the well-known algorithm CLARANS, and that(2) DBSCAN outperforms CLARANS by a factor of more than 100 in terms of efficiency.
Keywords: Clustering Algorithms, Arbitrary Shape of Clus-
ters, Efficiency on Large Spatial Databases, Handling Nlj4-
275oise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;聚类算法被用于空间数据库中的类型识别任务，然而对于聚类算法有如下的要求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;对领域知识的最低要求，用于确定输入参数&lt;/li&gt;
&lt;li&gt;发现任意形状的聚簇，&lt;em&gt;may be spherical, drawn-out, linear, elongated etc.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;在大型数据库中表现良好的性能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;作者提出了新的聚类算法DBSCAN，依赖基于密度的聚类的概念，旨在发现任意形状的聚类&lt;/p&gt;

&lt;p&gt;###Clustering Algorithms&lt;/p&gt;

&lt;p&gt;聚类算法有两种基本类型，分区和分层算法。&lt;/p&gt;

&lt;p&gt;分区算法将有n个目标的数据库D的分区，构造成为一个k聚簇。k是算法的输入参数，需要领域知识。分区算法通常从初始分区D开始，使用迭代控制策略优化目标函数。每个聚簇由聚簇的重心来表示_(k-means)&lt;em&gt;，或者位置上接近中心的一个目标&lt;/em&gt;(k-medoid)_&lt;/p&gt;

&lt;p&gt;因此，分区算法有两个步骤。首先，确定k个代表_(representatives)&lt;em&gt;的最小目标函数，其次，将每个目标聚集到离它最近的代表。第二步意味着一个分区在voronoi图&lt;/em&gt;(voronoi diagram)&lt;em&gt;中是等价的，并且每个聚簇包含在一个voronoi单元&lt;/em&gt;(voronoi cells)_中。所以，分区算法中所有聚簇的形状都是凸状的，而这种情况是有限的。&lt;/p&gt;

&lt;p&gt;CLARANS _(Clustering Large Applications based on RANdomized Search)&lt;em&gt;是一个改进的k-medoid方法。Ng &amp;amp; Han也讨论了确定数据库中聚簇的”自然“数$k&lt;/em&gt;{nat}$的方法。他们建议每个聚簇从2到n运行CLARANS一次。计算出每个发现的聚簇的轮廓系数，最后，最大轮廓系数的聚簇即为“自然”聚簇。遗憾的是，大量样本时这种方法的运行时间昂贵，因为它属于CLARANS的$O(n)$次调用。&lt;/p&gt;

&lt;p&gt;CLARANS假设所有聚簇的目标可以同时驻留在主存中，而这不适用于大型数据库，并且时间代价昂贵。&lt;/p&gt;

&lt;p&gt;分层算法创建一个数据库D的层次分解。层次分解以树形图_(dendrogram)_表示，树迭代的将D分割为更小的子集，知道每个子集仅由一个目标组成。&lt;/p&gt;

&lt;p&gt;这样一个层次结构中，树的每个结点表示D的一个聚簇。树形图即可以从叶子向上到树根*(凝聚方法agglomerative approach)&lt;em&gt;形成，也可以从树根向下到树叶&lt;/em&gt;(分裂方法divisive approach)*，通过每一步合并或者分割簇来生成。异于分区算法，层次算法不需要k作为输入。但是，必须定义终止条件，指定何时终止合并或者分割过程。凝聚算法中终止条件的一个例子是所有簇Q之间的临界距离$D_{min}$。&lt;/p&gt;

&lt;p&gt;到目前为止，层次聚类算法的主要问题是难以获得终止条件的适当参数。例如，$D&lt;em&gt;{min}$的值足够小以分离所有的自然簇，并且同时足够大以使得没有簇被分割为两部分。最近，在信号处理领域，已经提出了分层算法Ejcluster（García，Fdez-Valdivia，Cortijo＆Molina 1994)自动导出终止条件。它的关键思想是，如果一个足够小的步骤可以从第一个点走到第二个点，那么两个点属于同一个簇。 Ejcluster遵循分裂的方法。它不需要任何域知识输入。此外，实验表明它在发现非凸簇方面非常有效。然而，由于每对点的距离计算，Ejcluster的计算成本是$O(n^2)$。这对于诸如字符识别之类中等程度的n值的应用程序是可接受的，但是对于大型数据库上的应用程序来说这是代价高昂的。 Jain（1988)探索了一种基于密度的方法来识别k维点集中的聚类。数据集被划分为许多非重叠单元格&lt;/em&gt;(nonoverlapping cells)_，并构造直方图。具有相对高频率计数的单元格是潜在的聚类中心，并且聚类之间的边界落入直方图的“谷”中。&lt;/p&gt;

&lt;h3 id=&#34;a-density-based-notion-of-clusters&#34;&gt;A Density Based Notion of Clusters&lt;/h3&gt;

&lt;p&gt;对聚簇的认识：每个聚簇有一个典型的密度，远远高于簇的外部。此外，噪声区域的密度低于任何的簇。&lt;/p&gt;

&lt;p&gt;关键思想是对于聚簇的每个点，给定半径的邻域必须包含至少最小数量的点，即邻域的密度必须超过某个阈值。邻域的形状通过选择两个点p和q的距离函数$dist(p,q)$来确定。例如，在2D空间使用曼哈顿距离，邻域的形状是矩形。DBSCAN适用于任何距离函数，可以在给定的应用中选择适当的函数。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 1&lt;/strong&gt;:(Eps-neighborhood of a point) The Eps-neighborhood of a point p, denoted by $N&lt;em&gt;{Eps}(P)$, is defined by $N&lt;/em&gt;{Eps}(P)= {q \in D | dist(p,q) \le Eps}$.&lt;/p&gt;

&lt;p&gt;一种朴素的方法可能要求簇中的每个点，在该点的Eps邻域中至少存在最小数量（MinPts)的点。然而这种方法失败了，因为簇中有两种点，簇内部的点 _(core points)&lt;em&gt;和簇边界上的点&lt;/em&gt;(border points)_。通常，边界点的Eps邻域包含比核心点的Eps邻域少得多的点。因此不得不设置相对较小的点的最小值来包含属于同一聚簇的所有点。然而，这个值不是各个簇的特征，特别是存在噪音时。所以，我们要求对于簇C中的每个点p，在C中存在点q，使得p在q的Eps邻域内，并且NEps（q)包含至少MinPts点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 2&lt;/strong&gt;:(directly density-reachable) A point p is directly density-reachable from a point q wrt. Eps, MinPts if&lt;/p&gt;

&lt;p&gt;1) $p \in N_{Eps}(q)$&lt;/p&gt;

&lt;p&gt;2) $|N_{Eps}(q)|\ge  MinPts$(core point condition).&lt;/p&gt;

&lt;p&gt;显然，直接密度可达对于核心点对是对称的。然而，一般而言，如果涉及一个核心点和一个边界点，则它不是对称的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 3&lt;/strong&gt;:(density-reachable) A point P is density-reachable from a point q wrt. Eps and MinPts if there is a chain of points $p_1 ,\dots ,p_n, p_1=q, p&lt;em&gt;n= p$ such that $p&lt;/em&gt;{i+1}$ is directly density-reachable from $p_i$.&lt;/p&gt;

&lt;p&gt;密度可达性是直接密度可达性的规范扩展。这个关系是可传递的，但不是对称的&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 4&lt;/strong&gt;:(density-connected) A point p is density connected to a point q wrt. Eps and MinPts if there is a point o such that both, p and q are density-reachable from o wrt. Eps and MinPts.&lt;/p&gt;

&lt;p&gt;密度连通性是对称的，随遇密度可达的点，密度连通性是自反的。&lt;/p&gt;

&lt;p&gt;簇被定义为一组密度连接点，具有最大的密度可达性。想对给定的一组的簇的集合定义噪声。噪声只是D中不属于任何一个簇的一组点集。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 5&lt;/strong&gt;:(cluster) Let D be a database of points. A cluster C wrt. Eps and MinPts is a non-empty subset of D satisfying the following conditions:&lt;/p&gt;

&lt;p&gt;1) $\forall \ p, q: if\ p \in C$ and q is density-reachable from p wrt. Eps and MinPts, then $q \in C$.(Maximality)&lt;/p&gt;

&lt;p&gt;2) $\forall \ p,q \ \in C$ is density-connected to q wrt. EPS and MinPts.(Connectivity)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Definition 6&lt;/strong&gt;:(noise) Let $C_1,&amp;hellip;, C_k$ be the clusters of the database D wrt. parameters $Eps_i$ and $MinPts_i$,i= 1,&amp;hellip;.k. Then we define the noise as the set of points in the database D not belonging to any cluster $C_i$. i.e. noise=$(p\in D|\forall i:p \notin C_i)$.&lt;/p&gt;

&lt;p&gt;集群C至少包含一个点p，p必须通过某个点o（可能等同于p)与其自身密度连接。因此，o至少需要满足核心点的条件，因此o的eps领域至少包含MinPts个点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lemma 1&lt;/strong&gt;: Let p be a point in D and $|N_{Eps}(p)| \ge MinPts$. Then the set $O={o|o \in D$ and o is density-reachable from p wrt. Eps and MinPts} is a cluster wrt. Eps and MinPts.&lt;/p&gt;

&lt;p&gt;聚簇C并不明显的由任何核心点决定。但是C中的每个点密度可达任何一个核心点，所以C恰好包含从C的任意核心点可以密度可达的点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lemma 2&lt;/strong&gt;: Let C be a cluster wrt. Eps and MinPts and let p be any point in C with $|N_{Eps}(p)| \ge MinPts$. Then C equals to the set $O={o|o \in D$ and o is density-reachable from p wrt. Eps and MinPts}&lt;/p&gt;

&lt;h3 id=&#34;4-dbscan-density-based-spatial-clustering-of-applications-with-noise&#34;&gt;4.DBSCAN: Density Based Spatial Clustering of Applications with Noise&lt;/h3&gt;

&lt;p&gt;基于密度的噪声空间聚类的应用&lt;/p&gt;

&lt;p&gt;根据定义5和6发现空间数据库中的聚簇和噪声&lt;/p&gt;

&lt;p&gt;简单有效的启发式方法可以确定“最薄”（即最低密度)簇的参数Eps和MinPts的值&lt;/p&gt;

&lt;h5 id=&#34;4-1算法&#34;&gt;4.1算法&lt;/h5&gt;

&lt;p&gt;DBSCAN从任意点p开始，检索所有密度可达的点，根据Eps和MinPts。如果p是核心点，此过程产生一个聚（Lemma 2)。如果p是边缘点，没有点可以从p密度可达，那么DBSCAN访问下一个点。&lt;/p&gt;

&lt;p&gt;由于我们使用Eps和MinPts的全局值，如果两个不同密度的簇彼此接近，则DBSCAN可以根据定义5将两个簇合并为一个簇。设两组点$S_1$和$S_2$之间的距离定义为$dist(S_1,S_2)=min{dist(p,q)|lp \in S_1, q \in S_2 }$。然后，仅当两组之间的距离大于Eps时，具有至少最薄簇的密度的两组点将彼此分离。因此，对于具有较高MinPts值的簇，可能需要递归调用DBSCAN。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBSCAN的基本版本

DBSCAN(SetOfPoints, Eps, MinPts) 
// SetOfPoints is UNCLASSIFIED
 	ClusterId := nextId(NOISE);
 	FOR i FROM 1 TO SetOfPoints.size DO 
		Point := SetOfPoints.get(i);
 		IF Point.ClId = UNCLASSIFIED THEN 
			IF ExpandCluster(SetOfPoints, ClusterId, Eps, MinPts) THEN 
				ClusterId := nextId(ClusterId) 
			END IF 
		END IF 
	END FOR 
END; // DBSCAN 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SetOfPoints是整个数据库或先前运行中发现的群集。 Eps和MinPts是手动或根据4.2节中介绍的启发法确定的全局密度参数。函数SetOfPoints.get(i)返回SetOfPoints的第i个元素。 DBSCAN使用的最重要的功能是ExpandCluster，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExpandCluster(SetOfPoints, Point, CiId, Eps, MinPts) : Boolean;
	seeds:=SetOfPoints.regionQuery(Point, Eps)
	IF seeds.size&amp;lt;MinPts THEN // no core point
		SetOfPoint.changeClId(Point, NOISE)
		RETURN False;
	ELSE // all points in seeds are density-
			// reachable from Point 
		SetOfPoints.changeClIds(seeds, ClId);
		seeds.delete(Point); 
		WHILE seeds &amp;lt;&amp;gt; Empty DO
			currentP := seeds.first();
			result := setofPoints.regionQuery(currentP,Eps);
			IF result.size &amp;gt;= MinPts THEN 
				FOR i FROM 1 TO result.size DO
					resultP := result.get(i) 
					IF resultP.ClId IN {UNCLASSIFIED, NOISE} THEN
						IF resultP.ClId = UNCLASSIFIED THEN
							seeds, append(resultP)
						END IF;
						SetOfPoints. changeClId(resultP, ClId)
					END IF; // UNCLASSIFIED or NOISE 
				END FOR ;
			END IF; // result.size &amp;gt;= MinPts
			seeds, delete (currentP)
		END WHILE; // seeds &amp;lt;&amp;gt; Empty
		RETURN True; 
	END IF
END; // ExpandCluster
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title></title>
      <link>https://cheioKID.github.io/post/deutsch/deutsch_grammer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cheioKID.github.io/post/deutsch/deutsch_grammer/</guid>
      
        <description>&lt;p&gt;####换音与变音
元音只在第二人称及第三人称单数时发生变化。
并非所有带e和a的动词在变位时都会发生元音变化：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;元音无变化
ich gehe - du gehst, 
ich lache - du lachst …
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;#####换音动词e-i
| e | i |
| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- |
| emptehlen | er empfiehlt |
| essen | er sst |
| geben | er gibt |
| fernsehen | er sieht fern |
| helfen | er hilft |
| lesen | er liest |
| mitnehmen | er nimmt mit |
| nehmen | er nimmt |
| sehen | er sieht |
| sprechen | er spricht |
| vergessen | er vergisst |
| werden | er wird |
|||&lt;/p&gt;

&lt;p&gt;#####变音动词a-a
| a | a |
| &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- | &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- |
| abfahren | er fahrt ab |
| anfangen | er fangt an |
| einladen | er ladt ein |
| einschlafen | er schlaft ein |
| fahren | er fahrt |
| gefallen | es gefallt |
| laufen | er lauft |
| schlafen | er schlaft |
| tragen | er tragt |
| waschen | er wascht |
|||&lt;/p&gt;

&lt;p&gt;müssen, können, dürfen 和wollen 在进行单数人称的变位时元音会发生变化。&lt;code&gt;第一人称单数&lt;/code&gt;和&lt;code&gt;第三人称单数&lt;/code&gt;的&lt;code&gt;现在时&lt;/code&gt;变位同形，&lt;strong&gt;无词尾&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;情态动词位于第二位，&lt;strong&gt;实义动词原形位于句末&lt;/strong&gt;。
若句子的意思可通过上下文表达明白，&lt;strong&gt;实义动词可以省略&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;####情态动词
|情态动词|释义|
|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-|
|müssen|没有其他选择|
|können|1.习得|
||2.有机会，有可能|
||3.被允许|
|nicht dürfen |禁止|
|dürfen |允许|
||愿望(礼貌)|
|möchten|愿望(直接)|
|wollen|(用这个词表达向他人索取某物的愿望是不礼貌的)|
|sollen|1.你希望我&amp;hellip;? (只用于问句中)|
||2.转述他人对我的要求|&lt;/p&gt;

&lt;p&gt;####可分前缀&lt;/p&gt;

&lt;p&gt;|可分前缀| 可分前缀 |可分前缀|可分前缀|
|&amp;ndash;|&amp;ndash;|&amp;ndash;|&amp;ndash;|
|ab-|ein-|statt-|zu-|
|an-|fern-|teil|zurecht-|
|auf-|her-|um-|zurück-|
|aus-|mit-|vor-|zusammen-|
词重音永远在&lt;strong&gt;前缀&lt;/strong&gt;上: &lt;u&gt;ein&lt;/u&gt;kaufen&lt;/p&gt;

&lt;p&gt;####命令式&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;du的动词变位后去掉st，&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ihr和Sie正常变位。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;du和ihr去掉，Sie位于动词后。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Gehen Sie! Geh! Geht!
Bringen Sie das mit! Bring das mit! Bringt das mit!
Seien Sie! Sei! Seid!
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;bitte 用于句首或句尾
Hilf mir doch!
Hilf mir mal!
Hilf mir noch mal!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;####特殊疑问句&lt;/p&gt;

&lt;p&gt;####一般疑问句&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;动词在第一位，用Ja/Nein回答。&lt;/li&gt;
&lt;li&gt;有nicht的情况下，Doch表示事实上的肯定，Nein表示事实上否定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;####语序&lt;/p&gt;

&lt;p&gt;|句型|语序|
|&amp;ndash;|&amp;ndash;|
|陈述句|动词位于第二位，主语在动词的左边，如果其它成分位于第一位，则主语位于动词的右边。|
|特殊疑问句|动词位于第二位，疑问在第一位，主语在第三位。|
|一般疑问句|动词位于句首，主语在动词的右边。|
|命令式|动词位于句首，Sie在右边，du和ihr已省略。|
|时间及地点|时间状语(Wann? Wie lange? Wie oft?) 通常位于左半句(常在第一位)。|
||地点状语(Wo? Wohin? Woher?)通常位于右半句。|
|可分动词|可分前缀放在句尾，正常变位|&lt;/p&gt;

&lt;p&gt;变位动词位于&lt;strong&gt;第二位&lt;/strong&gt;，其他谓语成分(分词)位于句末。
&lt;code&gt;sein + 形容词&lt;/code&gt;，&lt;code&gt;双动词&lt;/code&gt;及&lt;code&gt;名词-动词&lt;/code&gt;组合与&lt;code&gt;可分动词&lt;/code&gt;用法相同。
| sein + 形容词 | 双动词 | 名词-动词 |
|&amp;ndash;|&amp;ndash;|&amp;ndash;|
|wunderbar sein|schwimmen gehen|Tennis spielen|
|müde sein|einkaufen gehen|Deutsch lernen|
|||Wein trinken|&lt;/p&gt;

&lt;p&gt;####名词复数&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;复述词尾&lt;/th&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-en&lt;/td&gt;
&lt;td&gt;所有以-ung,-heit,-keit,-ie,-o结尾的名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;几乎所有以-e结尾的名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;很多阴性名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;以-in结尾→-innen&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(此为最常见的复数词尾)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-er&lt;/td&gt;
&lt;td&gt;几乎所有中性短名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;一些阳性名词，没有阴性名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-e&lt;/td&gt;
&lt;td&gt;很多短名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;仅变音&lt;/td&gt;
&lt;td&gt;很多以er，-en,-e/结尾的名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;所有以-chen 和-ein结尾的名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;所有以-a,-i,-o,-y结尾的名词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;所有缩略词&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;很多外来词&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;|无复数形式的名词| |
|&amp;ndash;|&amp;ndash;|
|抽象名词|das Glück,die Liebe,der Hunger,die Kommunikation,der Sport,die Musik,das Wetter&amp;hellip;|
|物质名词|das Gold,das Wasser,die Milch&amp;hellip;|
|集合名词|das Obst,die Polizei,die Kleidung,der Urlaub&amp;hellip;|
|动词不定式作名词|das Essen,das Sprechen,das Spielen&amp;hellip;|&lt;/p&gt;

&lt;p&gt;| 无单数形式名词|          |
| &amp;mdash; | &amp;ndash; |
| 一些国家名与地理专有名词 | die USA,die Alpen&amp;hellip;           |
| 集合名词     | die Eltern,die Leute,die Möbel |
|           | 及die Ferien&amp;hellip;       |&lt;/p&gt;

&lt;p&gt;◦   冠词
零冠词
不可数名词属零冠词情况
(如Zeit, Lust, Geld, Glück, Hunger)
同属零冠词情况的还有:
Ich bin + (职业)
Ich bin Pilotin von Beruf.&lt;/p&gt;

&lt;p&gt;◦   否定
名词，名词前加冠词kein，注意冠词变位
其它，nicht&lt;/p&gt;

&lt;p&gt;Ich esse immer zu Mittag. lch esse nie zu Mittag.
Auf der Party kenne ich alle. lch kenne niemand auf der Party.
Isst du etwas? Isst du alles? lch esse nichts.
Kannst du nur mit Brille lesen? Ich kann ohne Brille lesen.
Warst du schon mal in Paris? Nein, ich war noch nicht in Paris. Ich war noch nie in Frankreich.
Hast du noch Hunger? Nein, ich habe keinen Hunger mehr.
Liebst du Thomas noch? Nein,ich liebe ihn nicht mehr.&lt;/p&gt;

&lt;p&gt;◦   第四格
只有阳性名词的第四格形式与第一格有所不同: den/einen/keinen。
物主代词的变格同kein: Ich liebe meinen Mann.&lt;/p&gt;

&lt;p&gt;◦   第三格
阳性名词和中性名词的第三格形式相同。
第三格复数词尾为-n。
复数形式以-s结尾的不需另加-n: Wir fahren mit zwei Autos.
物主代词变格同kein。&lt;/p&gt;

&lt;p&gt;◦   物主代词&lt;/p&gt;

&lt;p&gt;◦   疑问冠词和指示代词
welch-，dies-词尾变化对应定冠词的变化&lt;/p&gt;

&lt;p&gt;◦   人称代词的三格，四格&lt;/p&gt;

&lt;p&gt;◦   支配双宾语的动词
动词＋三格＋四格
三格为间接宾语，只能为人或动物，满足&amp;rdquo;人三物四&amp;rdquo;
Darf ich Ihnen einen Tee anbieten ?
anbieten
Er hat uns die Getränke bezahlt.
bezahlen
Er hat uns Kaffee bestellt.
bestellen
Bitte bringen Sie mir einen Kaffee.
bringen
Ich kann Ihnen ein Restaurant empfehlen.
empfehlen
Können Sie mir das Problem erklären?
erklären
Meine Oma hat uns immer schöne Geschichten erzählt.
erzählen
Bitte geben Sie mir die Rechnung.
geben
Er holt uns die Getranke.
holen
Ich michte meinem Sohn einen Laptop kaufen.
kaufen
Wer kocht uns heute das Mittagessen?
kochen
Sie hat ihm ein Buch geliehen.
leihen
Die Firma liefert uns die Mobel am Freitag.
li efern
Sie bringen ihm aus dem Urlaub ein Souvenir mit.
mitbringen
Wir renovieren unseren Freunden die Wohnung.
renovieren
19)
Die Werkstatt kann uns das Auto erst nachste Woche reparieren.
reparieren
Bitte reservieren Sie uns einen Tisch fir 20:00 Uhr.
reservieren
Hast du ihm die Neuigkeit gesagt?
sagen
Sie schenkt ihrem Vater eine Krawatte.
schenken
Konnen Sieuns bitte Informationen schicken?
schicken
Deriseurhat ihr dieHaresuper gschiten.
schneiden
Sie schreibt ihm eine E-Mail.
schreiben
ieseviet ihren Cisten Kfeeund Kuchen.
servieren
Eeasainenein Brdeseinenaten iPod
verkaufen
Ich winsche dir viel Glick!
winschen
Die Fau re ihnen die Shenlrdaeicn in der Shadt
zeigen&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>